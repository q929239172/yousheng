<火山程序 类型 = "通常" 版本 = 1 />

包 火山.WebView2浏览框 <注释 = "模块名称：WebView2浏览框（非官方模块）" 注释 = "版本号：2024.12.13a" 注释 = "作者：CYJ123"
        注释 = "QQ号：89075309" 注释 = "QQ群：526361209" "//@视窗.预定义宏" = "WINVER=0x0600\r\n_WIN32_WINNT=0x0600"
        @视窗.头文件搜寻目录 = "include\\" @视窗.外部头文件 = "<wil/com.h>" @视窗.外部头文件 = "<wrl.h>" @视窗.外部头文件 = "WebView2.h"
        @视窗.外部头文件 = "WebView2EnvironmentOptions.h" @视窗.外部库 = "x64\\WebView2LoaderStatic.lib">

# @begin
# using namespace Microsoft::WRL;
# bool g_isCompleted = false;
# void g_AwaitAsyncFunction () {
#     MSG msg = { 0 };
#     while (GetMessageW (&msg, nullptr, 0, 0) > 0) {
#         DispatchMessageW (&msg);
#         if (g_isCompleted == true) break;
#     }
#     g_isCompleted = false;
# }
# @end

类 WebView2全局类 <公开 折叠>
{
    变量 作者声明 <静态 类型 = 文本型 值 = "模块名称：WebView2浏览框（非官方模块） | 作者：CYJ123 | QQ号：89075309 | QQ群：526361209">

    方法 比较浏览器版本 <公开 静态 类型 = 整数 注释 = "如果<版本一>小于<版本二>，则返回-1；" 注释 = "如果<版本一>等于<版本二>，则返回0；"
            注释 = "如果<版本一>大于<版本二>，则返回1" 折叠 折叠2 @禁止流程检查 = 真>
    参数 版本一 <类型 = 文本型>
    参数 版本二 <类型 = 文本型>
    {
        @ int value = 0;
        @ CompareBrowserVersions (@<版本一>.GetText (), @<版本二>.GetText (), &value);
        @ return value;
    }

    方法 取兼容版本信息 <公开 静态 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        返回 ("")

        @ wil::com_ptr<CoreWebView2EnvironmentOptions> options = Microsoft::WRL::Make<CoreWebView2EnvironmentOptions>();
        @ wil::unique_cotaskmem_string value;
        @ options->get_TargetCompatibleBrowserVersion(&value);
        @ return value.get();
    }

    方法 取浏览器版本信息 <公开 静态 类型 = 文本型 折叠 @禁止流程检查 = 真>
    参数 浏览器可执行文件夹 <类型 = 文本型 @默认值 = 空对象>
    {
        @ wil::unique_cotaskmem_string value;
        @ GetAvailableCoreWebView2BrowserVersionString (@<浏览器可执行文件夹>.GetText (), &value);
        @ return value.get ();
    }

    方法 创建环境 <公开 静态 折叠 @禁止流程检查 = 真>
    参数 WebView2环境 <类型 = WebView2环境类 注释 = "输出参数">
    参数 浏览器可执行文件夹 <类型 = 文本型 @默认值 = 空对象>
    参数 用户数据文件夹 <类型 = 文本型 @默认值 = 空对象>
    参数 环境选项 <类型 = WebView2环境选项类 @默认值 = 空对象>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        // 调试输出 (作者声明)
        @ if (@<是否同步> == TRUE) {
        @ CreateCoreWebView2EnvironmentWithOptions (
        @     (BOOL)@<浏览器可执行文件夹>.IsNullObject () == TRUE ? nullptr : @<浏览器可执行文件夹>.GetText (),
        @     (BOOL)@<用户数据文件夹>.IsNullObject () == TRUE ? nullptr : @<用户数据文件夹>.GetText (),
        @     (BOOL)@<环境选项>.IsNullObject () == TRUE ? nullptr : @<环境选项>.m_data.get (),
        @     Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler> (
        @         [&] (HRESULT errorCode, ICoreWebView2Environment* createdEnvironment) -> HRESULT {
        @             @<WebView2环境>.m_data = createdEnvironment;
        @             @<WebView2环境>.BindEvent ();
        @             g_isCompleted = true;
        @             return S_OK;
        @         }
        @     ).Get ());
        @ }
        @ else {
        @ CreateCoreWebView2EnvironmentWithOptions (
        @     (BOOL)@<浏览器可执行文件夹>.IsNullObject () == TRUE ? nullptr : @<浏览器可执行文件夹>.GetText (),
        @     (BOOL)@<用户数据文件夹>.IsNullObject () == TRUE ? nullptr : @<用户数据文件夹>.GetText (),
        @     (BOOL)@<环境选项>.IsNullObject () == TRUE ? nullptr : @<环境选项>.m_data.get (),
        @     Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler> (
        @         [&] (HRESULT errorCode, ICoreWebView2Environment* createdEnvironment) -> HRESULT {
        @             @<WebView2环境>.m_data = createdEnvironment;
        @             @<WebView2环境>.BindEvent ();
        @             @<WebView2环境.创建完毕> (errorCode);
        @             return S_OK;
        @         }
        @     ).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
    }

    方法 取特征码 <静态 类型 = 文本型 折叠 折叠2 @禁止流程检查 = 真 @视窗.外部头文件 = "<Wbemidl.h>" @视窗.外部库 = "wbemuuid.lib"
            @视窗.外部库 = "iphlpapi.lib">
    {
        变量 主板序列号 <类型 = 文本型>
        @ IWbemServices* pSvc = nullptr;
        @ IWbemLocator* pLoc = nullptr;
        @ IEnumWbemClassObject* pEnumerator = nullptr;
        @ if (SUCCEEDED(CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED))) {
        @     BOOL blSucceeded = FALSE;
        @     do
        @     {
        @         if (FAILED(CoCreateInstance(CLSID_WbemLocator, 0, CLSCTX_INPROC_SERVER, IID_IWbemLocator, (LPVOID*)&pLoc)) || !pLoc)
        @             break;
        @         if (FAILED(pLoc->ConnectServer(_T("ROOT\\CIMV2"), nullptr, nullptr, 0, NULL, 0, 0, &pSvc)) || !pSvc)
        @             break;
        @         if (FAILED(CoSetProxyBlanket(pSvc, RPC_C_AUTHN_WINNT, RPC_C_AUTHZ_NONE, nullptr,
        @             RPC_C_AUTHN_LEVEL_CALL, RPC_C_IMP_LEVEL_IMPERSONATE, nullptr, EOAC_NONE)))
        @             break;
        @         BSTR strQuery = _T("SELECT * FROM Win32_BaseBoard");
        @         const HRESULT hr = SUCCEEDED(pSvc->ExecQuery(_T("WQL"), strQuery,
        @         WBEM_FLAG_FORWARD_ONLY | WBEM_FLAG_RETURN_IMMEDIATELY, nullptr, &pEnumerator));
        @         blSucceeded = (SUCCEEDED(hr) && pEnumerator != 0);
        @     } while (FALSE);
        @     if (pSvc != nullptr)  pSvc->Release();
        @     if (pLoc != nullptr)  pLoc->Release();
        @     CoUninitialize();
        @     if (blSucceeded == TRUE) {
        @         ULONG uReturn = 0;
        @         IWbemClassObject* pClassObject = nullptr;
        @         while (pEnumerator)
        @         {
        @             if (FAILED(pEnumerator->Next(WBEM_INFINITE, 1, &pClassObject, &uReturn)) || !pClassObject || uReturn == 0)
        @                 break;
        @         }
        @         if (pClassObject != nullptr) {
        @             VARIANT vtProp;
        @             VariantInit(&vtProp);
        @             pClassObject->Get(_T("SerialNumber"), 0, &vtProp, 0, 0);
        @             if (vtProp.vt != VT_EMPTY) {
        @                 @<主板序列号>.SetText(vtProp.bstrVal);
        @                 VariantClear(&vtProp);
        @             }
        @         }
        @         if (pClassObject != nullptr)  pClassObject->Release();
        @     }
        @ }
        @ if (pEnumerator != nullptr)  pEnumerator->Release();

        变量 网卡MAC <类型 = 文本型>
        @ IP_ADAPTER_INFO* pAdapterInfo = nullptr;
        @ ULONG ulOutBufLen;
        @ pAdapterInfo = (IP_ADAPTER_INFO*)malloc(sizeof(IP_ADAPTER_INFO));
        @ ulOutBufLen = sizeof(IP_ADAPTER_INFO);
        @ if (GetAdaptersInfo(pAdapterInfo, &ulOutBufLen) != ERROR_SUCCESS) {
        @     free(pAdapterInfo);
        @     pAdapterInfo = (IP_ADAPTER_INFO*)malloc(ulOutBufLen);
        @ }
        @ if (GetAdaptersInfo(pAdapterInfo, &ulOutBufLen) != ERROR_SUCCESS && pAdapterInfo) {
        @     free(pAdapterInfo);
        @ }
        @ else {
        @     if (pAdapterInfo) {
        @         for (UINT i = 0; i < pAdapterInfo->AddressLength; i++) {
        @             if (i == (pAdapterInfo->AddressLength - 1)) @<网卡MAC>.AddText(CVolString().Format(_T("%.2X\n"), (int)pAdapterInfo->Address[i]));
        @             else @<网卡MAC>.AddText(CVolString().Format(_T("%.2X"), (int)pAdapterInfo->Address[i]));
        @         }
        @     }
        @ }

        变量 字符串 <类型 = 文本型>
        变量 特征码 <类型 = 文本型>
        变量 i <类型 = 整数 值 = 0>
        变量 移位 <类型 = "整数 [5]" 值 = { 8, 4, 4, 4, 12 }>
        字符串 = 主板序列号 + 网卡MAC
        计次循环 (5)
        {
            特征码 = 特征码 + 取文本中间 (字符串, i, 移位 [取循环索引 ()]) + "-"
            i = i + 移位 [取循环索引 ()]
        }
        特征码 = 取文本左边 (特征码, 取文本长度 (特征码) - 1)
        返回 (特征码)

    }

    方法 IStream到字节集 <公开 静态 类型 = 字节集类 折叠 @禁止流程检查 = 真>
    参数 IStream指针 <类型 = 变整数>
    {
        @ @an<CVolMem> mem;
        @ if (@<IStream指针> == 0) return mem;
        @ wil::com_ptr<IStream> Stream = (IStream* )@<IStream指针>;
        @ STATSTG pstatstg = { 0 };
        @ Stream->Stat (&pstatstg, STATFLAG_NONAME);
        @ LARGE_INTEGER dlibMove;
        @ dlibMove.QuadPart = 0;
        @ Stream->Seek (dlibMove, STREAM_SEEK_SET, nullptr);
        @ int cb = (int)pstatstg.cbSize.QuadPart;
        @ Stream->Read (mem.Alloc (cb), cb, nullptr);
        @ return mem;
    }
}

类 WebView2环境选项类 <公开 折叠>
{

    # @begin
    # <> <include>
    # wil::com_ptr<CoreWebView2EnvironmentOptions> m_data = Microsoft::WRL::Make<CoreWebView2EnvironmentOptions> ();
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 命令行 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_AdditionalBrowserArguments (&value);
        @ return value.get ();
    }

    方法 命令行 <公开 属性写 折叠>
    参数 值内容 <类型 = 文本型>
    {
        @ m_data->put_AdditionalBrowserArguments (@<值内容>.GetText ());
    }

    方法 语言 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_Language (&value);
        @ return value.get ();
    }

    方法 语言 <公开 属性写 折叠>
    参数 值内容 <类型 = 文本型>
    {
        @ m_data->put_Language (@<值内容>.GetText ());
    }

    方法 独占用户数据文件夹 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_ExclusiveUserDataFolderAccess (&value);
        @ return value;
    }

    方法 独占用户数据文件夹 <公开 属性写 折叠>
    参数 是否独占 <类型 = 逻辑型>
    {
        @ m_data->put_ExclusiveUserDataFolderAccess (@<是否独占>);
    }
}

类 WebView2环境类 <公开>
{
    方法 是否为空 <公开 类型 = "逻辑型 " @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2Environment> m_data;
    # inline_ @sn<current_class> (ICoreWebView2Environment* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # void BindEvent ();
    # <> </include>
    # void @sn<current_class>::BindEvent () {
    #     ((ICoreWebView2Environment5*)m_data.get ())->add_BrowserProcessExited (
    #         Callback<ICoreWebView2BrowserProcessExitedEventHandler> (
    #             [&] (ICoreWebView2Environment* sender, ICoreWebView2BrowserProcessExitedEventArgs* args) -> HRESULT {
    #                 UINT32 value = 0;
    #                 args->get_BrowserProcessId (&value);
    #                 COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND kind;
    #                 args->get_BrowserProcessExitKind (&kind);
    #                 
    #                 m_data = nullptr; // 释放环境实例
    #
    #                 @<浏览器进程已退出> (value, kind);
    #                 return S_OK;
    #             }).Get (), nullptr);
    #
    # }
    # @end

    方法 创建完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 错误码 <类型 = 整数>

    方法 浏览器进程已退出 <公开 定义事件 类型 = 整数 折叠>
    参数 进程ID <类型 = 整数>
    参数 进程退出类型 <类型 = 整数 注释 = "0 表示 NORMAL | 浏览器进程正常结束；" 注释 = "1 表示 FAILED | 浏览器进程意外结束" 折叠2>

    方法 创建Web资源响应 <公开 折叠>
    参数 WebView2Web资源响应 <类型 = WebView2Web资源响应类 注释 = "输出参数">
    参数 内容数据 <类型 = 字节集类 @默认值 = 空对象>
    参数 状态码 <类型 = 整数 @默认值 = 200>
    参数 原因短语 <类型 = 文本型 @默认值 = "OK">
    参数 响应头 <类型 = 文本型 注释 = "多个响应头用换行符分隔" @默认值 = "">
    {
        @ wil::com_ptr<IStream> content;
        @ if ((BOOL)@<内容数据>.IsNullObject () == FALSE) {
        @     content = SHCreateMemStream (@<内容数据>.GetPtr (), @<内容数据>.GetSize ());
        @ }
        @ m_data->CreateWebResourceResponse (
        @     content.get (),
        @     @<状态码>,
        @     @<原因短语>.GetText (),
        @     @<响应头>.GetText (),
        @     &@<WebView2Web资源响应>.m_data);
    }

    方法 浏览器版本信息 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_BrowserVersionString (&value);
        @ return value.get ();
    }

    方法 创建Web资源请求 <公开 折叠>
    参数 WebView2Web资源请求 <类型 = WebView2Web资源请求类 注释 = "输出参数">
    参数 URL <类型 = 文本型 注释 = "必须为绝对URL，例如“https://www.w3schools.com/action_page.php”">
    参数 提交方式 <类型 = 文本型 @默认值 = "POST">
    参数 提交数据 <类型 = 字节集类 @默认值 = 空对象>
    参数 请求头 <类型 = 文本型 注释 = "多个响应头用换行符分隔；也可为空，再使用<WebView2Http响应头类>进行构造" @默认值 = "">
    {
        @ wil::com_ptr<IStream> postData;
        @ if ((BOOL)@<提交数据>.IsNullObject () == FALSE) {
        @     postData = SHCreateMemStream (@<提交数据>.GetPtr (), @<提交数据>.GetSize ());
        @ }
        @ ((ICoreWebView2Environment2*)m_data.get ())->CreateWebResourceRequest (
        @     @<URL>.GetText (),
        @     @<提交方式>.GetText (),
        @     postData.get (),
        @     @<请求头>.GetText (),
        @     &@<WebView2Web资源请求>.m_data);
    }

    方法 创建打印设置 <公开 折叠>
    参数 WebView2打印设置 <类型 = WebView2打印设置类 注释 = "输出参数">
    {
        @ ((ICoreWebView2Environment6*)m_data.get ())->CreatePrintSettings (&@<WebView2打印设置>.m_data);
    }

    方法 用户数据文件夹 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ ((ICoreWebView2Environment7*)m_data.get ())->get_UserDataFolder (&value);
        @ return value.get ();
    }

    方法 取进程信息组 <公开 折叠>
    参数 WebView2进程信息数组 <类型 = WebView2进程信息数组类 注释 = "输出参数">
    {
        @ ((ICoreWebView2Environment8*)m_data.get ())->GetProcessInfos (&@<WebView2进程信息数组>.m_data);
    }

    方法 创建菜单项 <公开 折叠>
    参数 WebView2菜单项 <类型 = WebView2菜单项类 注释 = "输出参数">
    参数 标题 <类型 = 文本型>
    参数 图标 <类型 = 字节集类 @默认值 = 空对象>
    参数 类型 <类型 = 整数 注释 = "0 表示 COMMAND | 命令项；" 注释 = "1 表示 CHECK_BOX | 选择项；" 注释 = "2 表示 RADIO | 单选项；"
            注释 = "3 表示 SEPARATOR | 分割线；" 注释 = "4 表示 SUBMENU | 子菜单" 折叠2 @默认值 = 0>
    {
        @ wil::com_ptr<IStream> iconStream;
        @ if ((BOOL)@<图标>.IsNullObject () == FALSE) {
        @     iconStream = SHCreateMemStream (@<图标>.GetPtr (), @<图标>.GetSize ());
        @ }
        @ ((ICoreWebView2Environment9*)m_data.get ())->CreateContextMenuItem (
        @     @<标题>.GetText (),
        @     iconStream.get (),
        @     (COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND)@<类型>,
        @     &@<WebView2菜单项>.m_data);
        @ @<WebView2菜单项>.BindEvent ();
    }

    方法 创建控制器选项 <公开 折叠>
    参数 WebView2控制器选项 <类型 = WebView2控制器选项类 注释 = "输出参数">
    {
        @ ((ICoreWebView2Environment10*)m_data.get ())->CreateCoreWebView2ControllerOptions (&@<WebView2控制器选项>.m_data);
    }

    方法 创建控制器 <公开>
    参数 WebView2控制器 <类型 = WebView2控制器类 注释 = "输出参数，WebView2控制器类的实例对象">
    参数 父窗口句柄 <类型 = 变整数>
    参数 控制器选项 <类型 = WebView2控制器选项类 @默认值 = 空对象>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 假>
    {
        @ if (!m_data) {
        @     @<WebView2控制器.创建完毕>(10086); 
        @     return;
        @ }

        @ if (@<是否同步> == TRUE) {
        @ ((ICoreWebView2Environment10*)m_data.get ())->CreateCoreWebView2ControllerWithOptions (
        @     (HWND)@<父窗口句柄>,
        @     (BOOL)@<控制器选项>.IsNullObject () == TRUE ? nullptr : @<控制器选项>.m_data.get (),
        @     Callback<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler> (
        @         [&] (HRESULT errorCode, ICoreWebView2Controller* createdController) -> HRESULT {
        @             @<WebView2控制器>.m_data = createdController;
        @             @<WebView2控制器>.BindEvent ();
        @             g_isCompleted = true;
        @             return S_OK;
        @         }
        @     ).Get ());
        @ }
        @ else {
        @ ((ICoreWebView2Environment10*)m_data.get ())->CreateCoreWebView2ControllerWithOptions (
        @     (HWND)@<父窗口句柄>,
        @     (BOOL)@<控制器选项>.IsNullObject () == TRUE ? nullptr : @<控制器选项>.m_data.get (),
        @     Callback<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler> (
        @         [&] (HRESULT errorCode, ICoreWebView2Controller* createdController) -> HRESULT {
        @             @<WebView2控制器>.m_data = createdController;
        @             @<WebView2控制器>.BindEvent ();
        @             @<WebView2控制器.创建完毕> (errorCode);
        @             return S_OK;
        @         }
        @     ).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
    }
}

类 WebView2Web资源响应类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2WebResourceResponse> m_data;
    # inline_ @sn<current_class> (ICoreWebView2WebResourceResponse* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 内容数据 <公开 属性读 类型 = 字节集类 折叠 @禁止流程检查 = 真>
    {
        @ wil::com_ptr<IStream> content;
        @ m_data->get_Content (&content);
        @ return @<WebView2全局类.IStream到字节集> ((INT_P)content.get ());
    }

    方法 内容数据 <公开 属性写 折叠>
    参数 内容数据 <类型 = 字节集类>
    {
        @ wil::com_ptr<IStream> content = SHCreateMemStream(@<内容数据>.GetPtr (), @<内容数据>.GetSize ());
        @ m_data->put_Content (content.get ());
    }

    方法 取响应头 <公开 折叠>
    参数 WebView2HTTP响应头 <类型 = WebView2Http响应头类 注释 = "输出参数">
    {
        @ m_data->get_Headers (&@<WebView2HTTP响应头>.m_data);
    }

    方法 原因短语 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_ReasonPhrase (&value);
        @ return value.get ();
    }

    方法 原因短语 <公开 属性写 折叠>
    参数 原因短语 <类型 = 文本型>
    {
        @ m_data->put_ReasonPhrase (@<原因短语>.GetText ());
    }

    方法 状态码 <公开 属性读 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ int value = 0;
        @ m_data->get_StatusCode (&value);
        @ return value;
    }

    方法 状态码 <公开 属性写 折叠>
    参数 状态码 <类型 = 整数>
    {
        @ m_data->put_StatusCode (@<状态码>);
    }
}

类 WebView2Web资源请求类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2WebResourceRequest> m_data;
    # inline_ @sn<current_class> (ICoreWebView2WebResourceRequest* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 内容数据 <公开 属性读 类型 = 字节集类 折叠 @禁止流程检查 = 真>
    {
        @ wil::com_ptr<IStream> content;
        @ m_data->get_Content (&content);
        @ return @<WebView2全局类.IStream到字节集> ((INT_P)content.get ());
    }

    方法 内容数据 <公开 属性写 折叠>
    参数 内容数据 <类型 = 字节集类>
    {
        @ wil::com_ptr<IStream> content = SHCreateMemStream (@<内容数据>.GetPtr (), @<内容数据>.GetSize ());
        @ m_data->put_Content (content.get ());
    }

    方法 取请求头 <公开 折叠>
    参数 WebView2HTTP请求头 <类型 = WebView2Http请求头类 注释 = "输出参数">
    {
        @ m_data->get_Headers (&@<WebView2HTTP请求头>.m_data);
    }

    方法 提交方式 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_Method (&value);
        @ return value.get ();
    }

    方法 提交方式 <公开 属性写 折叠>
    参数 提交方式 <类型 = 文本型>
    {
        @ m_data->put_Method (@<提交方式>.GetText ());
    }

    方法 URL <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_Uri (&value);
        @ return value.get ();
    }

    方法 URL <公开 属性写 折叠>
    参数 URL <类型 = 文本型>
    {
        @ m_data->put_Uri (@<URL>.GetText ());
    }
}

类 WebView2Http响应头类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2HttpResponseHeaders> m_data;
    # inline_ @sn<current_class> (ICoreWebView2HttpResponseHeaders* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 添加头 <公开 折叠>
    参数 名称 <类型 = 文本型>
    参数 值 <类型 = 文本型>
    {
        @ m_data->AppendHeader (@<名称>.GetText (), @<值>.GetText ());
    }

    方法 是否存在某头 <公开 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    参数 名称 <类型 = 文本型>
    {
        @ BOOL contains = FALSE;
        @ m_data->Contains (@<名称>.GetText (), &contains);
        @ return contains;
    }

    方法 取头值 <公开 类型 = 文本型 注释 = "返回与名称匹配的第一个头值" 折叠 @禁止流程检查 = 真>
    参数 名称 <类型 = 文本型>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->GetHeader (@<名称>.GetText (), &value);
        @ return value.get ();
    }

    方法 取头值2 <公开 注释 = "取与名称匹配的头值" 折叠>
    参数 WebView2HTTP头迭代器 <类型 = WebView2Http头迭代器类 注释 = "输出参数">
    参数 名称 <类型 = 文本型>
    {
        @ m_data->GetHeaders (@<名称>.GetText (), &@<WebView2HTTP头迭代器>.m_data);
    }

    方法 取头值3 <公开 注释 = "取整个响应头的迭代器" 折叠>
    参数 WebView2HTTP头迭代器 <类型 = WebView2Http头迭代器类 注释 = "输出参数">
    {
        @ m_data->GetIterator (&@<WebView2HTTP头迭代器>.m_data);
    }
}

类 WebView2Http请求头类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2HttpRequestHeaders> m_data;
    # inline_ @sn<current_class> (ICoreWebView2HttpRequestHeaders* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 是否存在某头 <公开 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    参数 名称 <类型 = 文本型>
    {
        @ BOOL contains = FALSE;
        @ m_data->Contains (@<名称>.GetText (), &contains);
        @ return contains;
    }

    方法 取头值 <公开 类型 = 文本型 注释 = "返回与名称匹配的第一个头值" 折叠 @禁止流程检查 = 真>
    参数 名称 <类型 = 文本型>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->GetHeader (@<名称>.GetText (), &value);
        @ return value.get ();
    }

    方法 取头值2 <公开 注释 = "取与名称匹配的头值" 折叠>
    参数 WebView2HTTP头迭代器 <类型 = WebView2Http头迭代器类 注释 = "输出参数">
    参数 名称 <类型 = 文本型>
    {
        @ m_data->GetHeaders (@<名称>.GetText (), &@<WebView2HTTP头迭代器>.m_data);
    }

    方法 取头值3 <公开 注释 = "取整个响应头的迭代器" 折叠>
    参数 WebView2HTTP头迭代器 <类型 = WebView2Http头迭代器类 注释 = "输出参数">
    {
        @ m_data->GetIterator (&@<WebView2HTTP头迭代器>.m_data);
    }

    方法 移除头 <公开 折叠>
    参数 名称 <类型 = 文本型>
    {
        @ m_data->RemoveHeader (@<名称>.GetText ());
    }

    方法 设置头 <公开 折叠>
    参数 名称 <类型 = 文本型>
    参数 值 <类型 = 文本型>
    {
        @ m_data->SetHeader (@<名称>.GetText (), @<值>.GetText ());
    }
}

类 WebView2Http头迭代器类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2HttpHeadersCollectionIterator> m_data;
    # inline_ @sn<current_class> (ICoreWebView2HttpHeadersCollectionIterator* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 当前是否可用 <公开 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL hasCurrent = FALSE;
        @ m_data->get_HasCurrentHeader (&hasCurrent);
        @ return hasCurrent;
    }

    方法 取名称和头值 <公开 折叠 @禁止流程检查 = 真>
    参数 名称 <类型 = 文本型 注释 = "输出参数">
    参数 值 <类型 = 文本型 注释 = "输出参数">
    {
        @ wil::unique_cotaskmem_string name;
        @ wil::unique_cotaskmem_string value;
        @ m_data->GetCurrentHeader (&name, &value)
        @ @<名称> = CVolString (name.get ());
        @ @<值> = CVolString (value.get ());
    }

    方法 移动到下一个 <公开 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL hasNext = FALSE;
        @ m_data->MoveNext (&hasNext);
        @ return hasNext;
    }
}

类 WebView2打印设置类 <公开 "">
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2PrintSettings> m_data;
    # inline_ @sn<current_class> (ICoreWebView2PrintSettings* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 页脚URL <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string footerUri;
        @ m_data->get_FooterUri (&footerUri);
        @ return footerUri.get ();
    }

    方法 页脚URL <公开 属性写 折叠>
    参数 页脚URL <类型 = 文本型>
    {
        @ m_data->put_FooterUri (@<页脚URL>.GetText ());
    }

    方法 页头标题 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string headerTitle;
        @ m_data->get_HeaderTitle (&headerTitle);
        @ return headerTitle.get ();
    }

    方法 页头标题 <公开 属性写 折叠>
    参数 页头标题 <类型 = 文本型>
    {
        @ m_data->put_HeaderTitle (@<页头标题>.GetText ());
    }

    方法 底边距 <公开 属性读 类型 = 小数 折叠 @禁止流程检查 = 真>
    {
        @ double marginBottom = 0;
        @ m_data->get_MarginBottom (&marginBottom);
        @ return marginBottom;
    }

    方法 左边距 <公开 属性读 类型 = 小数 折叠 @禁止流程检查 = 真>
    {
        @ double marginLeft = 0;
        @ m_data->get_MarginLeft (&marginLeft);
        @ return marginLeft;
    }

    方法 右边距 <公开 属性读 类型 = 小数 折叠 @禁止流程检查 = 真>
    {
        @ double marginRight = 0;
        @ m_data->get_MarginRight (&marginRight);
        @ return marginRight;
    }

    方法 顶边距 <公开 属性读 类型 = 小数 折叠 @禁止流程检查 = 真>
    {
        @ double marginTop = 0;
        @ m_data->get_MarginTop (&marginTop);
        @ return marginTop;
    }

    方法 底边距 <公开 属性写 折叠>
    参数 底边距 <类型 = 小数>
    {
        @ m_data->put_MarginBottom(@<底边距>);
    }

    方法 左边距 <公开 属性写 折叠>
    参数 左边距 <类型 = 小数>
    {
        @ m_data->put_MarginLeft (@<左边距>);
    }

    方法 右边距 <公开 属性写 折叠>
    参数 右边距 <类型 = 小数>
    {
        @ m_data->put_MarginRight (@<右边距>);
    }

    方法 顶边距 <公开 属性写 折叠>
    参数 顶边距 <类型 = 小数>
    {
        @ m_data->put_MarginTop (@<顶边距>);
    }

    方法 方向 <公开 属性读 类型 = 整数 注释 = "0 表示 PORTRAIT | 纵向；" 注释 = "1 表示 LANDSCAPE | 横向" 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_PRINT_ORIENTATION orientation;
        @ m_data->get_Orientation (&orientation);
        @ return orientation;
    }

    方法 方向 <公开 属性写 折叠>
    参数 方向 <类型 = 整数 注释 = "0 表示 PORTRAIT | 纵向；" 注释 = "1 表示 LANDSCAPE | 横向" 折叠2>
    {
        @ m_data->put_Orientation ((COREWEBVIEW2_PRINT_ORIENTATION)@<方向>);
    }

    方法 页面高度 <公开 属性读 类型 = 小数 折叠 @禁止流程检查 = 真>
    {
        @ double pageHeight = 0;
        @ m_data->get_PageHeight (&pageHeight);
        @ return pageHeight;
    }

    方法 页面宽度 <公开 属性读 类型 = 小数 折叠 @禁止流程检查 = 真>
    {
        @ double pageWidth = 0;
        @ m_data->get_PageWidth (&pageWidth);
        @ return pageWidth;
    }

    方法 页面高度 <公开 属性写 折叠>
    参数 页面高度 <类型 = 小数>
    {
        @ m_data->put_PageHeight (@<页面高度>);
    }

    方法 页面宽度 <公开 属性写 折叠>
    参数 页面宽度 <类型 = 小数>
    {
        @ m_data->put_PageWidth (@<页面宽度>);
    }

    方法 缩放系数 <公开 属性读 类型 = 小数 折叠 @禁止流程检查 = 真>
    {
        @ double scaleFactor = 0;
        @ m_data->get_ScaleFactor (&scaleFactor);
        @ return scaleFactor;
    }

    方法 缩放系数 <公开 属性写 折叠>
    参数 缩放系数 <类型 = 小数>
    {
        @ m_data->put_ScaleFactor (@<缩放系数>);
    }

    方法 是否打印背景 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_ShouldPrintBackgrounds (&value);
        @ return value;
    }

    方法 是否打印背景 <公开 属性写 折叠>
    参数 是否打印 <类型 = 逻辑型>
    {
        @ m_data->put_ShouldPrintBackgrounds (@<是否打印>);
    }

    方法 是否打印页头和页脚 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_ShouldPrintHeaderAndFooter (&value);
        @ return value;
    }

    方法 是否打印页头和页脚 <公开 属性写 折叠>
    参数 是否打印 <类型 = 逻辑型>
    {
        @ m_data->put_ShouldPrintHeaderAndFooter (@<是否打印>);
    }

    方法 是否仅打印选择内容 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_ShouldPrintSelectionOnly (&value);
        @ return value;
    }

    方法 是否仅打印选择内容 <公开 属性写 折叠>
    参数 是否仅打印 <类型 = 逻辑型>
    {
        @ m_data->put_ShouldPrintSelectionOnly (@<是否仅打印>);
    }

    方法 排序 <公开 属性读 类型 = 整数 注释 = "0 表示 DEFAULT | 默认；" 注释 = "1 表示 COLLATED | 排序；" 注释 = "2 表示 UNCOLLATED | 不排序"
            折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_PRINT_COLLATION collation;
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->get_Collation (&collation);
        @ return collation;
    }

    方法 排序 <公开 属性写 折叠>
    参数 排序 <类型 = 整数 注释 = "0 表示 DEFAULT | 默认；" 注释 = "1 表示 COLLATED | 排序；" 注释 = "2 表示 UNCOLLATED | 不排序" 折叠2>
    {
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->put_Collation ((COREWEBVIEW2_PRINT_COLLATION)@<排序>);
    }

    方法 颜色模式 <公开 属性读 类型 = 整数 注释 = "0 表示 DEFAULT | 默认；" 注释 = "1 表示 COLOR | 彩色；" 注释 = "2 表示 GRAYSCALE | 灰色"
            折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_PRINT_COLOR_MODE colorMode;
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->get_ColorMode (&colorMode);
        @ return colorMode;
    }

    方法 颜色模式 <公开 属性写 折叠>
    参数 颜色模式 <类型 = 整数 注释 = "0 表示 DEFAULT | 默认；" 注释 = "1 表示 COLOR | 彩色；" 注释 = "2 表示 GRAYSCALE | 灰色" 折叠2>
    {
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->put_ColorMode ((COREWEBVIEW2_PRINT_COLOR_MODE)@<颜色模式>);
    }

    方法 份数 <公开 属性读 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ INT32 value;
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->get_Copies (&value);
        @ return value;
    }

    方法 份数 <公开 属性写 折叠>
    参数 份数 <类型 = 整数>
    {
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->put_Copies ((INT32)@<份数>);
    }

    方法 双面打印 <公开 属性读 类型 = 整数 注释 = "0 表示 DEFAULT | 默认；" 注释 = "1 表示 ONE_SIDED | 一侧；"
            注释 = "2 表示 TWO_SIDED_LONG_WebView2 | 双面长边翻转；" 注释 = "3 表示 TWO_SIDED_SHORT_WebView2 | 双面短边翻转" 折叠
            @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_PRINT_DUPLEX duplex;
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->get_Duplex (&duplex);
        @ return duplex;
    }

    方法 双面打印 <公开 属性写 折叠>
    参数 双面打印 <类型 = 整数 注释 = "0 表示 DEFAULT | 默认；" 注释 = "1 表示 ONE_SIDED | 一侧；"
            注释 = "2 表示 TWO_SIDED_LONG_WebView2 | 双面长边翻转；" 注释 = "3 表示 TWO_SIDED_SHORT_WebView2 | 双面短边翻转">
    {
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->put_Duplex ((COREWEBVIEW2_PRINT_DUPLEX)@<双面打印>);
    }

    方法 介质尺寸 <公开 属性读 类型 = 整数 注释 = "介质尺寸就是纸张" 注释 = "0 表示 DEFAULT | 默认；" 注释 = "1 表示 CUSTOM | 自定义" 折叠 折叠2
            @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_PRINT_MEDIA_SIZE mediaSize;
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->get_MediaSize (&mediaSize);
        @ return mediaSize;
    }

    方法 介质尺寸 <公开 属性写 折叠>
    参数 介质尺寸 <类型 = 整数 注释 = "0 表示 DEFAULT | 默认；" 注释 = "1 表示 CUSTOM | 自定义" 折叠2>
    {
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->put_MediaSize ((COREWEBVIEW2_PRINT_MEDIA_SIZE)@<介质尺寸>);
    }

    方法 页面范围 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->get_PageRanges (&value);
        @ return value.get ();
    }

    方法 页面范围 <公开 属性写 折叠>
    参数 页面范围 <类型 = 文本型>
    {
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->put_PageRanges (@<页面范围>.GetText ());
    }

    方法 打印几页 <公开 属性读 类型 = 整数 注释 = "在一张纸上打印文档多页" 折叠 @禁止流程检查 = 真>
    {
        @ INT32 value = 0;
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->get_PagesPerSide (&value);
        @ return value;
    }

    方法 打印几页 <公开 属性写 折叠>
    参数 打印几页 <类型 = 整数>
    {
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->put_PagesPerSide ((INT32)@<打印几页>);
    }

    方法 打印机名称 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->get_PrinterName (&value);
        @ return value.get ();
    }

    方法 打印机名称 <公开 属性写 折叠>
    参数 打印机名称 <类型 = 文本型>
    {
        @ ((ICoreWebView2PrintSettings2*)m_data.get ())->put_PrinterName (@<打印机名称>.GetText ());
    }
}

类 WebView2进程信息数组类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2ProcessInfoCollection> m_data;
    # inline_ @sn<current_class> (ICoreWebView2ProcessInfoCollection* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 取成员数 <公开 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ UINT count = 0;
        @ m_data->get_Count (&count);
        @ return (INT)count;
    }

    方法 取成员 <公开 折叠>
    参数 WebView2进程信息 <类型 = WebView2进程信息类 注释 = "输出参数">
    参数 索引 <类型 = 整数>
    {
        @ m_data->GetValueAtIndex ((UINT32)@<索引>, &@<WebView2进程信息>.m_data);
    }
}

类 WebView2进程信息类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2ProcessInfo> m_data;
    # inline_ @sn<current_class> (ICoreWebView2ProcessInfo* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 类型 <公开 属性读 类型 = 整数 注释 = "0 表示 BROWSER | 浏览器；" 注释 = "1 表示 RENDERER | 渲染；" 注释 = "2 表示 UTILITY | 实用程序；"
            注释 = "3 表示 SANDBOX_HELPER | 沙盒帮助程序；" 注释 = "4 表示 GPU | GPU；" 注释 = "5 表示 PPAPI_PLUGIN | PPAPI插件；"
            注释 = "6 表示 PPAPI_BROKER | PPAPI代理" 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_PROCESS_KIND kind;
        @ m_processInfo->get_ColorMode (&kind);
        @ return kind;
    }

    方法 进程ID <公开 属性读 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ INT32 value = 0;
        @ m_processInfo->get_ProcessId (&value);
        @ return (INT)value;
    }
}

类 WebView2控制器选项类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2ControllerOptions> m_data;
    # inline_ @sn<current_class> (ICoreWebView2ControllerOptions* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 是否启用无痕模式 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_IsInPrivateModeEnabled (&value);
        @ return value;
    }

    方法 是否启用无痕模式 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ m_data->put_IsInPrivateModeEnabled (@<是否启用>);
    }

    方法 Profile名称 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_ProfileName (&value);
        @ return value.get ();
    }

    方法 Profile名称 <公开 属性写 折叠>
    参数 Profile名称 <类型 = 文本型>
    {
        @ m_data->put_ProfileName (@<Profile名称>.GetText ());
    }
}

类 WebView2控制器类 <公开>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    方法 取窗口句柄 <公开 类型 = 变整数 折叠>
    {
        变量 窗口句柄 <类型 = 变整数>
        窗口句柄 = WebView2辅助函数.取窗口句柄Ex (父窗口, "Chrome_WidgetWin_0")
        窗口句柄 = WebView2辅助函数.取窗口句柄Ex (窗口句柄, "Chrome_WidgetWin_1")
        窗口句柄 = WebView2辅助函数.取窗口句柄Ex (窗口句柄, "Chrome_RenderWidgetHostHWND")
        返回 (窗口句柄)
    }

    方法 创建完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 错误码 <类型 = 整数>

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2Controller> m_data;
    # inline_ @sn<current_class> (ICoreWebView2Controller* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # void BindEvent ();
    # <> </include>
    # void @sn<current_class>::BindEvent () {
    #    
    #     if (!m_data) {
    #       return; 
    #      }
    #
    #     // 快捷键被按下
    #     m_data->add_AcceleratorKeyPressed (
    #         Callback<ICoreWebView2AcceleratorKeyPressedEventHandler> (
    #             [&] (ICoreWebView2Controller* sender, ICoreWebView2AcceleratorKeyPressedEventArgs* args) -> HRESULT {
    #                 @<快捷键被按下> (@dt<事件参数_快捷键被按下>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 获取焦点
    #     m_data->add_GotFocus (
    #         Callback<ICoreWebView2FocusChangedEventHandler> (
    #             [&] (ICoreWebView2Controller* sender, IUnknown* args) -> HRESULT {
    #                 @<获取焦点> ();
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 失去焦点
    #     m_data->add_LostFocus (
    #         Callback<ICoreWebView2FocusChangedEventHandler> (
    #             [&] (ICoreWebView2Controller* sender, IUnknown* args) -> HRESULT {
    #                 @<失去焦点> ();
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 请求移动焦点
    #     m_data->add_MoveFocusRequested (
    #         Callback<ICoreWebView2MoveFocusRequestedEventHandler> (
    #             [&] (ICoreWebView2Controller* sender, ICoreWebView2MoveFocusRequestedEventArgs* args) -> HRESULT {
    #                 @<请求移动焦点> (@dt<事件参数_请求移动焦点>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 缩放系数被改变
    #     m_data->add_ZoomFactorChanged (
    #         Callback<ICoreWebView2ZoomFactorChangedEventHandler> (
    #             [&] (ICoreWebView2Controller* sender, IUnknown* args) -> HRESULT {
    #                 @<缩放系数被改变> (@<缩放系数> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 光栅化比例被改变
    #     ((ICoreWebView2Controller3*)m_data.get ())->add_RasterizationScaleChanged (
    #         Callback<ICoreWebView2RasterizationScaleChangedEventHandler> (
    #             [&] (ICoreWebView2Controller* sender, IUnknown* args) -> HRESULT {
    #                 @<光栅化比例被改变> (@<光栅化比例> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #
    # }
    # @end

    方法 快捷键被按下 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_快捷键被按下>

    方法 获取焦点 <公开 定义事件 类型 = 整数>

    方法 失去焦点 <公开 定义事件 类型 = 整数>

    方法 请求移动焦点 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_请求移动焦点>

    方法 缩放系数被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 缩放系数 <类型 = 小数>

    方法 光栅化比例被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 光栅化比例 <类型 = 小数>

    方法 关闭 <公开 折叠>
    {
        @ if(!m_data) return ;
        @ m_data->Close ();
    }

    方法 边框矩形 <公开 属性读 类型 = 矩形类 折叠 @禁止流程检查 = 真>
    {
        @ if(!m_data) return ;
        @ RECT bounds = { 0 };
        @ m_data->get_Bounds (&bounds);
        @ return @dt<矩形类> (&bounds);
    }

    方法 边框矩形 <公开 属性写 折叠>
    参数 边框矩形 <类型 = 矩形类>
    {
        @ if(!m_data) return ;
        @ RECT bounds = { 0 };
        @ bounds.left = @<边框矩形.左边>;
        @ bounds.top = @<边框矩形.顶边>;
        @ bounds.right = @<边框矩形.右边>;
        @ bounds.bottom = @<边框矩形.底边>;
        @ m_data->put_Bounds (bounds);
    }

    方法 置边框矩形 <公开 注释 = "函数<属性读> 边框矩形 的变形" 折叠 "">
    参数 左边 <类型 = 整数>
    参数 顶边 <类型 = 整数>
    参数 右边 <类型 = 整数>
    参数 底边 <类型 = 整数>
    {
        @ if(!m_data) return ;
        @ RECT bounds = { @<左边>, @<顶边>, @<右边>, @<底边> };
        @ m_data->put_Bounds (bounds);
    }

    方法 取WebView2浏览框 <公开 折叠>
    参数 WebView2浏览框 <类型 = WebView2浏览框类 注释 = "输出参数">
    {
        @ if(!m_data) return ;
        @ m_data->get_CoreWebView2 (&@<WebView2浏览框>.m_data);
        @ @<WebView2浏览框>.BindEvent ();
    }

    方法 是否可视 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ if(!m_data) return ;
        @ BOOL value = FALSE;
        @ m_data->get_IsVisible (&value);
        @ return value;
    }

    方法 是否可视 <公开 属性写 折叠>
    参数 是否可视 <类型 = 逻辑型>
    {
        @ if(!m_data) return ;
        @ m_data->put_IsVisible (@<是否可视>);
    }

    方法 父窗口 <公开 属性读 类型 = 变整数 折叠 @禁止流程检查 = 真>
    {
        @ if(!m_data) return ;
        @ HWND value;
        @ m_data->get_ParentWindow (&value);
        @ return (INT_P)value;
    }

    方法 父窗口 <公开 属性写 折叠>
    参数 父窗口句柄 <类型 = 变整数>
    {
        @ if(!m_data) return ;
        @ m_data->put_ParentWindow ((HWND)@<父窗口句柄>);
    }

    方法 缩放系数 <公开 属性读 类型 = 小数 折叠 @禁止流程检查 = 真>
    {
        @ double value = 0;
        @ m_data->get_ZoomFactor (&value);
        @ return value;
    }

    方法 缩放系数 <公开 属性写 折叠>
    参数 缩放系数 <类型 = 小数>
    {
        @ if(!m_data) return ;
        @ m_data->put_ZoomFactor (@<缩放系数>);
    }

    方法 移动焦点 <公开 折叠>
    参数 移动焦点原因 <类型 = 整数 注释 = "0 表示 PROGRAMMATIC | 计划的；" 注释 = "1 表示 NEXT | 下一个；" 注释 = "2 表示 PREVIOUS | 上一个"
            折叠2>
    {
        @ m_data->MoveFocus ((COREWEBVIEW2_MOVE_FOCUS_REASON)@<移动焦点原因>);
    }

    方法 通知父窗口位置被改变 <公开 折叠>
    {
        @ m_data->NotifyParentWindowPositionChanged ();
    }

    方法 置边框矩形和缩放系数 <公开 折叠>
    参数 边框矩形 <类型 = 矩形类>
    参数 缩放系数 <类型 = 小数>
    {
        @ RECT bounds = { 0 };
        @ bounds.left = @<边框矩形.左边>;
        @ bounds.top = @<边框矩形.顶边>;
        @ bounds.right = @<边框矩形.右边>;
        @ bounds.bottom = @<边框矩形.底边>;
        @ m_data->SetBoundsAndZoomFactor (bounds, @<缩放系数>);
    }

    方法 取背景颜色 <公开 折叠>
    参数 红色分量 <类型 = 整数 注释 = "输出参数" @视窗.后缀文本 = "&">
    参数 绿色分量 <类型 = 整数 注释 = "输出参数" @视窗.后缀文本 = "&">
    参数 蓝色分量 <类型 = 整数 注释 = "输出参数" @视窗.后缀文本 = "&">
    参数 透明度 <类型 = 整数 注释 = "输出参数" @视窗.后缀文本 = "&">
    {
        @ COREWEBVIEW2_COLOR backgroundColor;
        @ ((ICoreWebView2Controller2*)m_data.get ())->get_DefaultBackgroundColor (&backgroundColor);
        @ @<透明度> = (INT)backgroundColor.A;
        @ @<红色分量> = (INT)backgroundColor.R;
        @ @<绿色分量> = (INT)backgroundColor.G;
        @ @<蓝色分量> = (INT)backgroundColor.B;
    }

    方法 置背景颜色 <公开 折叠>
    参数 红色分量 <类型 = 整数>
    参数 绿色分量 <类型 = 整数>
    参数 蓝色分量 <类型 = 整数>
    参数 透明度 <类型 = 整数>
    {
        @ if(!m_data) return ;
        @ COREWEBVIEW2_COLOR backgroundColor;
        @ backgroundColor.A = (BYTE)@<透明度>;
        @ backgroundColor.R = (BYTE)@<红色分量>;
        @ backgroundColor.G = (BYTE)@<绿色分量>;
        @ backgroundColor.B = (BYTE)@<蓝色分量>;
        @ ((ICoreWebView2Controller2*)m_data.get ())->put_DefaultBackgroundColor (backgroundColor);
    }

    方法 边界模式 <公开 属性读 类型 = 整数 注释 = "0 表示 RAW_PIXELS | 原始像素；" 注释 = "1 表示 RASTERIZATION_SCALE | 逻辑像素" 折叠 折叠2
            @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_BOUNDS_MODE boundsMode;
        @ ((ICoreWebView2Controller3*)m_data.get ())->get_BoundsMode (&boundsMode);
        @ return boundsMode;
    }

    方法 边界模式 <公开 属性写 折叠>
    参数 边界模式 <类型 = 整数 注释 = "0 表示 RAW_PIXELS | 原始像素；" 注释 = "1 表示 RASTERIZATION_SCALE | 逻辑像素" 折叠2>
    {
        @ ((ICoreWebView2Controller3*)m_data.get ())->put_BoundsMode ((COREWEBVIEW2_BOUNDS_MODE)@<边界模式>);
    }

    方法 光栅化比例 <公开 属性读 类型 = 小数 折叠 @禁止流程检查 = 真>
    {
        @ double value = 0;
        @ ((ICoreWebView2Controller3*)m_data.get ())->get_RasterizationScale (&value);
        @ return value;
    }

    方法 光栅化比例 <公开 属性写 折叠>
    参数 光栅化比例 <类型 = 小数>
    {
        @ if(!m_data) return ;
        @ ((ICoreWebView2Controller3*)m_data.get ())->put_RasterizationScale (@<光栅化比例>);
    }

    方法 是否随DPI缩放 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ ((ICoreWebView2Controller3*)m_data.get ())->get_ShouldDetectMonitorScaleChanges (&value);
        @ return value;
    }

    方法 是否随DPI缩放 <公开 属性写 折叠>
    参数 是否随DPI缩放 <类型 = 逻辑型>
    {
        @ ((ICoreWebView2Controller3*)m_data.get ())->put_ShouldDetectMonitorScaleChanges (@<是否随DPI缩放>);
    }

    方法 是否允许外部拖放 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ ((ICoreWebView2Controller4*)m_data.get ())->get_AllowExternalDrop (&value);
        @ return value;
    }

    方法 是否允许外部拖放 <公开 属性写 折叠>
    参数 是否允许 <类型 = 逻辑型>
    {
        @ ((ICoreWebView2Controller4*)m_data.get ())->put_AllowExternalDrop (@<是否允许>);
    }
}

类 WebView2菜单项数组类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2ContextMenuItemCollection> m_data;
    # inline_ @sn<current_class> (ICoreWebView2ContextMenuItemCollection* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 取成员数 <公开 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ UINT32 value = 0;
        @ m_data->get_Count (&value);
        @ return (INT)value;
    }

    方法 取成员 <公开 折叠>
    参数 WebView2菜单项 <类型 = WebView2菜单项类 注释 = "输出参数">
    参数 索引 <类型 = 整数>
    {
        @ m_data->GetValueAtIndex ((UINT32)@<索引>, &@<WebView2菜单项>.m_data);
    }

    方法 插入成员 <公开 折叠 @禁止流程检查 = 真>
    参数 索引 <类型 = 整数>
    参数 菜单项 <类型 = WebView2菜单项类>
    {
        @ m_data->InsertValueAtIndex ((UINT32)@<索引>, @<菜单项>.m_data.get ());
    }

    方法 删除成员 <公开 折叠 @禁止流程检查 = 真>
    参数 索引 <类型 = 整数>
    {
        @ m_data->RemoveValueAtIndex ((UINT32)@<索引>);
    }
}

类 WebView2菜单项类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2ContextMenuItem> m_data;
    # inline_ @sn<current_class> (ICoreWebView2ContextMenuItem* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # void BindEvent ();
    # <> </include>
    # void @sn<current_class>::BindEvent () {
    #     // 自定义项被选择
    #     m_data->add_CustomItemSelected (
    #         Callback<ICoreWebView2CustomItemSelectedEventHandler> (
    #             [&] (ICoreWebView2ContextMenuItem* sender, IUnknown* args) -> HRESULT {
    #                 @<自定义项被选择> ();
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #
    # }
    # @end

    方法 自定义项被选择 <公开 定义事件 类型 = 整数>

    方法 取子菜单项数组 <公开 折叠>
    参数 WebView2菜单项数组 <类型 = WebView2菜单项数组类 注释 = "输出参数">
    {
        @ m_data->get_Children (&@<WebView2菜单项数组>.m_data);
    }

    方法 命令ID <公开 属性读 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ INT32 value = 0;
        @ m_data->get_CommandId (&value);
        @ return value;
    }

    方法 图标 <公开 属性读 类型 = 字节集类 折叠 @禁止流程检查 = 真>
    {
        @ wil::com_ptr<IStream> value;
        @ m_data->get_Icon (&value);
        @ return @<WebView2全局类.IStream到字节集> ((INT_P)value.get ());
    }

    方法 是否选中 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_IsChecked (&value);
        @ return value;
    }

    方法 是否选中 <公开 属性写 折叠>
    参数 是否选中 <类型 = 逻辑型>
    {
        @ m_data->put_IsChecked (@<是否选中>);
    }

    方法 是否启用 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_IsEnabled (&value);
        @ return value;
    }

    方法 是否启用 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ m_data->put_IsEnabled (@<是否启用>);
    }

    方法 类型 <公开 属性读 类型 = 整数 注释 = "0 表示 COMMAND | 命令项；" 注释 = "1 表示 CHECK_BOX | 选择项；" 注释 = "2 表示 RADIO | 单选项；"
            注释 = "3 表示 SEPARATOR | 分割线；" 注释 = "4 表示 SUBMENU | 子菜单" 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_CONTEXT_MENU_ITEM_KIND kind;
        @ m_data->get_Kind (&kind);
        @ return kind;
    }

    方法 标题 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_Label (&value);
        @ return value.get ();
    }

    方法 名称 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_Name (&value);
        @ return value.get ();
    }

    方法 快捷键 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_ShortcutKeyDescription (&value);
        @ return value.get ();
    }
}

类 WebView2浏览框类 <公开 "">
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2> m_data;
    # inline_ @sn<current_class> (ICoreWebView2* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # void BindEvent ();
    # <> </include>
    # void @sn<current_class>::BindEvent () {
    #     // 全屏元素被改变
    #     m_data->add_ContainsFullScreenElementChanged (
    #         Callback<ICoreWebView2ContainsFullScreenElementChangedEventHandler> (
    #             [&] (ICoreWebView2* sender, IUnknown* args) -> HRESULT {
    #                 @<全屏元素被改变> (@<是否全屏> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 内容即将加载
    #     m_data->add_ContentLoading (
    #         Callback<ICoreWebView2ContentLoadingEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2ContentLoadingEventArgs* args) -> HRESULT {
    #                 UINT64 navigationId;
    #                 args->get_NavigationId (&navigationId);
    #                 BOOL isErrorPage;
    #                 args->get_IsErrorPage (&isErrorPage);
    #                 @<内容即将加载> ((INT64)navigationId, isErrorPage);
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 标题被改变
    #     m_data->add_DocumentTitleChanged (
    #         Callback<ICoreWebView2DocumentTitleChangedEventHandler> (
    #             [&] (ICoreWebView2* sender, IUnknown* args) -> HRESULT {
    #                 @<标题被改变> (@<网页标题> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 框架导航完毕
    #     m_data->add_FrameNavigationCompleted (
    #         Callback<ICoreWebView2NavigationCompletedEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2NavigationCompletedEventArgs* args) -> HRESULT {
    #                 UINT64 navigationId;
    #                 args->get_NavigationId (&navigationId);
    #                 BOOL isSuccess;
    #                 args->get_IsSuccess (&isSuccess);
    #                 int http_status_code;
    #                 ((ICoreWebView2NavigationCompletedEventArgs2*)args)->get_HttpStatusCode (&http_status_code);
    #                 COREWEBVIEW2_WEB_ERROR_STATUS webErrorStatus;
    #                 args->get_WebErrorStatus (&webErrorStatus);
    #                 @<框架导航完毕> ((INT64)navigationId, isSuccess, http_status_code, webErrorStatus);
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 框架导航即将开始
    #     m_data->add_FrameNavigationStarting (
    #         Callback<ICoreWebView2NavigationStartingEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2NavigationStartingEventArgs* args) -> HRESULT {
    #                 @<框架导航即将开始> (@dt<事件参数_导航即将开始>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 历史记录被改变
    #     m_data->add_HistoryChanged (
    #         Callback<ICoreWebView2HistoryChangedEventHandler> (
    #             [&] (ICoreWebView2* sender, IUnknown* args) -> HRESULT {
    #                 @<历史记录被改变> ();
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 导航完毕
    #     m_data->add_NavigationCompleted (
    #         Callback<ICoreWebView2NavigationCompletedEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2NavigationCompletedEventArgs* args) -> HRESULT {
    #                 UINT64 navigationId;
    #                 args->get_NavigationId (&navigationId);
    #                 BOOL isSuccess;
    #                 args->get_IsSuccess (&isSuccess);
    #                 int http_status_code;
    #                 ((ICoreWebView2NavigationCompletedEventArgs2*)args)->get_HttpStatusCode (&http_status_code);
    #                 COREWEBVIEW2_WEB_ERROR_STATUS webErrorStatus;
    #                 args->get_WebErrorStatus (&webErrorStatus);
    #                 @<导航完毕> ((INT64)navigationId, isSuccess, http_status_code, webErrorStatus);
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 导航即将开始
    #     m_data->add_NavigationStarting (
    #         Callback<ICoreWebView2NavigationStartingEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2NavigationStartingEventArgs* args) -> HRESULT {
    #                 @<导航即将开始> (@dt<事件参数_导航即将开始>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 打开新窗口
    #     m_data->add_NewWindowRequested (
    #         Callback<ICoreWebView2NewWindowRequestedEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2NewWindowRequestedEventArgs* args) -> HRESULT {
    #                 @<打开新窗口> (@dt<事件参数_打开新窗口>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 请求权限
    #     m_data->add_PermissionRequested (
    #         Callback<ICoreWebView2PermissionRequestedEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2PermissionRequestedEventArgs* args) -> HRESULT {
    #                 @<请求权限> (@dt<事件参数_请求权限>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 进程失败
    #     m_data->add_ProcessFailed (
    #         Callback<ICoreWebView2ProcessFailedEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2ProcessFailedEventArgs* args) -> HRESULT {
    #                 COREWEBVIEW2_PROCESS_FAILED_KIND kind;
    #                 args->get_ProcessFailedKind (&kind);
    #                 COREWEBVIEW2_PROCESS_FAILED_REASON reason;
    #                 ((ICoreWebView2ProcessFailedEventArgs2*)args)->get_Reason (&reason);
    #                 int exitCode;
    #                 ((ICoreWebView2ProcessFailedEventArgs2*)args)->get_ExitCode (&exitCode);
    #                 // wil::com_ptr<ICoreWebView2FrameInfoCollection> frameInfoCollection;
    #                 // args2->get_FrameInfosForFailedProcess (&frameInfoCollection);
    #                 wil::unique_cotaskmem_string processDescription;
    #                 ((ICoreWebView2ProcessFailedEventArgs2*)args)->get_ProcessDescription (&processDescription);
    #                 @<进程失败> (
    #                     kind,
    #                     reason,
    #                     exitCode,
    #                     // @dt<WebView2框架信息数组类> (frameInfoCollection.get ()),
    #                     CVolString (processDescription.get ()));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // JS对话框即将打开
    #     m_data->add_ScriptDialogOpening (
    #         Callback<ICoreWebView2ScriptDialogOpeningEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2ScriptDialogOpeningEventArgs* args) -> HRESULT {
    #                 @<JS对话框即将打开> (@dt<事件参数_JS对话框即将打开>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // URL被改变
    #     m_data->add_SourceChanged (
    #         Callback<ICoreWebView2SourceChangedEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2SourceChangedEventArgs* args) -> HRESULT {
    #                 BOOL isNewDocument;
    #                 args->get_IsNewDocument (&isNewDocument);
    #                 @<URL被改变> (@<网页URL> (), isNewDocument);
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 收到Web消息
    #     m_data->add_WebMessageReceived (
    #         Callback<ICoreWebView2WebMessageReceivedEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2WebMessageReceivedEventArgs* args) -> HRESULT {
    #                 @<收到Web消息> (@dt<事件参数_收到Web消息>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 请求Web资源
    #     m_data->add_WebResourceRequested (
    #         Callback<ICoreWebView2WebResourceRequestedEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2WebResourceRequestedEventArgs* args) -> HRESULT {
    #                 @<请求Web资源> (@dt<事件参数_请求Web资源>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 请求关闭窗口
    #     m_data->add_WindowCloseRequested (
    #         Callback<ICoreWebView2WindowCloseRequestedEventHandler> (
    #             [&] (ICoreWebView2* sender, IUnknown* args) -> HRESULT {
    #                 @<请求关闭窗口> ();
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // DOM内容被加载
    #     ((ICoreWebView2_2*)m_data.get ())->add_DOMContentLoaded (
    #         Callback<ICoreWebView2DOMContentLoadedEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2DOMContentLoadedEventArgs* args) -> HRESULT {
    #                 UINT64 navigationId;
    #                 args->get_NavigationId (&navigationId);
    #                 @<DOM内容被加载> ((INT64)navigationId);
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 收到Web资源响应
    #     ((ICoreWebView2_2*)m_data.get ())->add_WebResourceResponseReceived (
    #         Callback<ICoreWebView2WebResourceResponseReceivedEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2WebResourceResponseReceivedEventArgs* args) -> HRESULT {
    #                 @<收到Web资源响应> (@dt<事件参数_收到Web资源响应>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 下载即将开始
    #     ((ICoreWebView2_4*)m_data.get ())->add_DownloadStarting (
    #         Callback<ICoreWebView2DownloadStartingEventHandler> (
    #             [&] (ICoreWebView2* sender, ICoreWebView2DownloadStartingEventArgs* args) -> HRESULT {
    #                 @<下载即将开始> (@dt<事件参数_下载即将开始>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #      // 框架被创建
    #      ((ICoreWebView2_4*)m_data.get ())->add_FrameCreated (
    #          Callback<ICoreWebView2FrameCreatedEventHandler> (
    #              [&] (ICoreWebView2* sender, ICoreWebView2FrameCreatedEventArgs* args) -> HRESULT {
    #                  @dt<WebView2框架类>* WebView2框架 = new @dt<WebView2框架类> ();
    #                  args->get_Frame (&WebView2框架->m_data);
    #                  // new一块内存，并初始化框架
    #                  @<框架被创建> (*WebView2框架);
    #                  return S_OK;
    #              }).Get (), nullptr
    #      );
    #     // 音频状态被改变
    #     ((ICoreWebView2_8*)m_data.get ())->add_IsDocumentPlayingAudioChanged (
    #         Callback<ICoreWebView2IsDocumentPlayingAudioChangedEventHandler> (
    #             [&] (ICoreWebView2* sender, IUnknown* args) -> HRESULT {
    #                 @<音频状态被改变> (@<是否正在播放音频> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 静音状态被改变
    #     ((ICoreWebView2_8*)m_data.get ())->add_IsMutedChanged (
    #         Callback<ICoreWebView2IsMutedChangedEventHandler> (
    #             [&] (ICoreWebView2* sender, IUnknown* args) -> HRESULT {
    #                 @<静音状态被改变> (@<是否静音> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 下载对话框打开状态被改变
    #     ((ICoreWebView2_9*)m_data.get ())->add_IsDefaultDownloadDialogOpenChanged (
    #         Callback<ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler> (
    #             [&] (ICoreWebView2* sender, IUnknown* args) -> HRESULT {
    #                 @<下载对话框打开状态被改变> ();
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 请求菜单
    #     ((ICoreWebView2_11*)m_data.get ())->add_ContextMenuRequested (
    #         Callback<ICoreWebView2ContextMenuRequestedEventHandler> (
    #                 [&] (ICoreWebView2* sender, ICoreWebView2ContextMenuRequestedEventArgs* args) -> HRESULT {
    #                 @<请求菜单> (@dt<事件参数_请求菜单>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 状态栏文本被改变
    #     ((ICoreWebView2_12*)m_data.get ())->add_StatusBarTextChanged (
    #         Callback<ICoreWebView2StatusBarTextChangedEventHandler> (
    #             [&] (ICoreWebView2* sender, IUnknown* args) -> HRESULT {
    #                 @<状态栏文本被改变> (@<状态栏文本> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 网站图标被改变
    #     ((ICoreWebView2_15*)m_data.get ())->add_FaviconChanged (
    #         Callback<ICoreWebView2FaviconChangedEventHandler> (
    #             [&] (ICoreWebView2* sender, IUnknown* args) -> HRESULT {
    #                 @<网站图标被改变> (@<网站图标Url> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #
    # }
    # @end

    方法 全屏元素被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 是否全屏 <类型 = 逻辑型>

    方法 内容即将加载 <公开 定义事件 类型 = 整数 折叠>
    参数 导航ID <类型 = 长整数>
    参数 是否为错误页 <类型 = 逻辑型>

    方法 标题被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 标题 <类型 = 文本型>

    方法 框架导航完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 导航ID <类型 = 长整数>
    参数 是否成功 <类型 = 逻辑型>
    参数 HTTP状态码 <类型 = 整数>
    参数 Web错误状态 <类型 = 整数
            注释 = "https://learn.microsoft.com/zh-cn/microsoft-WebView2/webview2/reference/win32/webview2-idl?view=webview2-1.0.2151.40#corewebview2_web_error_status">

    方法 框架导航即将开始 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_导航即将开始>

    方法 历史记录被改变 <公开 定义事件 类型 = 整数>

    方法 导航完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 导航ID <类型 = 长整数>
    参数 是否成功 <类型 = 逻辑型>
    参数 HTTP状态码 <类型 = 整数>
    参数 Web错误状态 <类型 = 整数>

    方法 导航即将开始 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_导航即将开始>

    方法 打开新窗口 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_打开新窗口>

    方法 请求权限 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_请求权限>

    方法 进程失败 <公开 定义事件 类型 = 整数 折叠>
    参数 失败类型 <类型 = 整数
            注释 = "https://learn.microsoft.com/zh-cn/microsoft-WebView2/webview2/reference/win32/webview2-idl?view=webview2-1.0.2151.40#corewebview2_process_failed_kind">
    参数 失败原因 <类型 = 整数
            注释 = "https://learn.microsoft.com/zh-cn/microsoft-WebView2/webview2/reference/win32/webview2-idl?view=webview2-1.0.2151.40#corewebview2_process_failed_reason">
    参数 退出码 <类型 = 整数>
    参数 "// 框架信息数组" <类型 = WebView2框架信息数组类>
    参数 进程描述 <类型 = 文本型>

    方法 JS对话框即将打开 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_JS对话框即将打开>

    方法 URL被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 URL <类型 = 文本型>
    参数 是否为新文档 <类型 = 逻辑型>

    方法 收到Web消息 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_收到Web消息>

    方法 请求Web资源 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_请求Web资源>

    方法 请求关闭窗口 <公开 定义事件 类型 = 整数>

    方法 DOM内容被加载 <公开 定义事件 类型 = 整数 折叠>
    参数 导航ID <类型 = 长整数>

    方法 收到Web资源响应 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_收到Web资源响应>

    方法 下载即将开始 <公开 定义事件 类型 = 整数>
    参数 事件参数 <类型 = 事件参数_下载即将开始>

    方法 框架被创建 <公开 定义事件 类型 = 整数 折叠>
    参数 WebView2框架 <类型 = WebView2框架类>

    方法 音频状态被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 是否正在播放音频 <类型 = 逻辑型>

    方法 静音状态被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 是否静音 <类型 = 逻辑型>

    方法 下载对话框打开状态被改变 <公开 定义事件 类型 = 整数>

    方法 请求菜单 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_请求菜单>

    方法 状态栏文本被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 状态栏文本 <类型 = 文本型>

    方法 网站图标被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 网站图标Url <类型 = 文本型>

    方法 在文档创建时添加JS <公开 注释 = "对应回调<在文档创建时添加的JS被执行 ()>" 折叠>
    参数 JS脚本 <类型 = 文本型>
    {
        @ m_data->AddScriptToExecuteOnDocumentCreated (
        @     @<JS脚本>.GetText (),
        @     Callback<ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler> (
        @         [&] (HRESULT error, PCWSTR id) -> HRESULT {
        @             @<在文档创建时添加的JS被执行> (CVolString (id), error);
        @             return S_OK;
        @         }).Get ()
        @ );
    }

    方法 在文档创建时添加的JS被执行 <公开 定义事件 类型 = 整数 折叠>
    参数 ID <类型 = 文本型>
    参数 错误码 <类型 = 整数>

    方法 移除在文档创建时添加的JS <公开 折叠>
    参数 ID <类型 = 文本型>
    {
        @ m_data->RemoveScriptToExecuteOnDocumentCreated (@<ID>.GetText ());
    }

    方法 添加请求Web资源过滤器 <公开 注释 = "用于网络拦截" 折叠>
    参数 URL <类型 = 文本型>
    参数 Web资源上下文 <类型 = 整数 注释 = "0 表示 ALL | 全部；" 注释 = "1 表示 DOCUMENT | 文档；" 注释 = "2 表示 STYLESHEET | CSS；"
            注释 = "3 表示 IMAGE | 图像；" 注释 = "4 表示 MEDIA | 媒体；" 注释 = "5 表示 FONT | 字体；" 注释 = "6 表示 SCRIPT | JS；"
            注释 = "..." 折叠2 @默认值 = 0>
    {
        @ LPCWSTR const uri = @<URL>.GetText ();
        @ COREWEBVIEW2_WEB_RESOURCE_CONTEXT const resourceContext = (COREWEBVIEW2_WEB_RESOURCE_CONTEXT)@<Web资源上下文>;
        @ m_data->AddWebResourceRequestedFilter (uri, resourceContext);
    }

    方法 移除Web资源请求过滤器 <公开 注释 = "注意：应当移除与添加次数相同的次数" 折叠>
    参数 URL <类型 = 文本型>
    参数 Web资源上下文 <类型 = 整数 注释 = "0 表示 ALL | 全部；" 注释 = "1 表示 DOCUMENT | 文档；" 注释 = "2 表示 STYLESHEET | CSS；"
            注释 = "3 表示 IMAGE | 图像；" 注释 = "4 表示 MEDIA | 媒体；" 注释 = "5 表示 FONT | 字体；" 注释 = "6 表示 SCRIPT | JS；"
            注释 = "..." 折叠2 @默认值 = 0>
    {
        @ LPCWSTR const uri = @<URL>.GetText ();
        @ COREWEBVIEW2_WEB_RESOURCE_CONTEXT const resourceContext = (COREWEBVIEW2_WEB_RESOURCE_CONTEXT)@<Web资源上下文>;
        @ m_data->RemoveWebResourceRequestedFilter (uri, resourceContext);
    }

    方法 调用DevTools方法 <公开 类型 = 文本型 注释 = "对应回调<调用DevTools方法完毕 ()>" 折叠>
    参数 方法名称 <类型 = 文本型>
    参数 参数 <类型 = 文本型>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        变量 返回结果 <类型 = 文本型>
        @ if (@<是否同步> == TRUE) {
        @ m_data->CallDevToolsProtocolMethod (
        @     @<方法名称>.GetText (),
        @     @<参数>.GetText (),
        @     Callback<ICoreWebView2CallDevToolsProtocolMethodCompletedHandler> (
        @         [&] (HRESULT errorCode, LPCWSTR returnObjectAsJson) -> HRESULT {
        @             @<返回结果> = CVolString (returnObjectAsJson);
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ m_data->CallDevToolsProtocolMethod (
        @     @<方法名称>.GetText (),
        @     @<参数>.GetText (),
        @     Callback<ICoreWebView2CallDevToolsProtocolMethodCompletedHandler> (
        @         [&] (HRESULT errorCode, LPCWSTR returnObjectAsJson) -> HRESULT {
        @             @<调用DevTools方法完毕> (CVolString (returnObjectAsJson), errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (返回结果)
    }

    方法 调用DevTools方法完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 返回结果 <类型 = 文本型>
    参数 错误码 <类型 = 整数>

    方法 截图 <公开 类型 = 字节集类 注释 = "对应回调<截图完毕 ()>" 折叠>
    参数 图像格式 <类型 = 整数 注释 = "0 表示 PNG；" 注释 = "1 表示 JPEG" 折叠2 @默认值 = 0>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        变量 图像数据 <类型 = 字节集类>
        @ wil::com_ptr<IStream> imageStream = SHCreateMemStream (nullptr, 0);
        @ if (@<是否同步> == TRUE) {
        @ m_data->CapturePreview (
        @     (COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT)@<图像格式>,
        @     imageStream.get (),
        @     Callback<ICoreWebView2CapturePreviewCompletedHandler> (
        @         [&] (HRESULT errorCode) -> HRESULT {
        @             @<图像数据> = @<WebView2全局类.IStream到字节集> ((INT_P)imageStream.get ());
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ m_data->CapturePreview (
        @     (COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT)@<图像格式>,
        @     imageStream.get (),
        @     Callback<ICoreWebView2CapturePreviewCompletedHandler> (
        @         [&] (HRESULT errorCode) -> HRESULT {
        @             @<截图完毕> (@<WebView2全局类.IStream到字节集> ((INT_P)imageStream.get ()), errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (图像数据)
    }

    方法 截图完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 图像数据 <类型 = 字节集类>
    参数 错误码 <类型 = 整数>

    方法 执行JS <公开 类型 = 文本型 注释 = "对应回调<执行JS完毕 ()>">
    参数 JS脚本 <类型 = 文本型>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 假>
    {
        变量 返回结果 <类型 = 文本型>
        @    if (!m_data) {
        @     return @<返回结果>;
        @     }

        @ if (@<是否同步> == TRUE) {
        @ m_data->ExecuteScript (
        @     @<JS脚本>.GetText (),
        @     Callback<ICoreWebView2ExecuteScriptCompletedHandler> (
        @         [&] (HRESULT errorCode, PCWSTR resultObjectAsJson) -> HRESULT {
        @             @<返回结果> = CVolString (resultObjectAsJson);
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ m_data->ExecuteScript (
        @     @<JS脚本>.GetText (),
        @     Callback<ICoreWebView2ExecuteScriptCompletedHandler> (
        @         [&] (HRESULT errorCode, PCWSTR resultObjectAsJson) -> HRESULT {
        @             @<执行JS完毕> (CVolString (resultObjectAsJson), errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (返回结果)
    }

    方法 执行JS完毕 <公开 定义事件 类型 = 整数>
    参数 返回结果 <类型 = 文本型>
    参数 错误码 <类型 = 整数>

    方法 进程ID <公开 属性读 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ UINT32 value = 0;
        @ m_data->get_BrowserProcessId (&value);
        @ return (INT)value;
    }

    方法 能否后退 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL canGoBack = FALSE;
        @ m_data->get_CanGoBack (&canGoBack);
        @ return canGoBack;
    }

    方法 能否前进 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL canGoForward = FALSE;
        @ m_data->get_CanGoForward (&canGoForward);
        @ return canGoForward;
    }

    方法 是否全屏 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL containsFullScreenElement = FALSE;
        @ m_data->get_ContainsFullScreenElement (&containsFullScreenElement);
        @ return containsFullScreenElement;
    }

    方法 网页标题 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string title;
        @ m_data->get_DocumentTitle (&title);
        @ return title.get ();
    }

    方法 取WebView2设置 <公开 折叠>
    参数 WebView2设置 <类型 = WebView2设置类 注释 = "输出参数">
    {
        @ m_data->get_Settings (&@<WebView2设置>.m_data);
    }

    方法 网页URL <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string uri;
        @ m_data->get_Source (&uri);
        @ return uri.get ();
    }

    方法 后退 <公开 折叠>
    {
        @ m_data->GoBack ();
    }

    方法 前进 <公开 折叠>
    {
        @ m_data->GoForward ();
    }

    方法 导航 <公开 类型 = " " 折叠 @禁止流程检查 = 真>
    参数 URL <类型 = 文本型>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 假>
    {
        @    if (!m_data) {
        @      return ;
        @     }


        @ EventRegistrationToken token;
        @ if (@<是否同步> == TRUE) {
        @ m_data->add_NavigationCompleted (
        @     Callback<ICoreWebView2NavigationCompletedEventHandler> (
        @         [&] (ICoreWebView2* sender, ICoreWebView2NavigationCompletedEventArgs* args) -> HRESULT {
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get (), &token);
        @ }
        @ m_data->Navigate (@<URL>.GetText ());
        @ if (@<是否同步> == TRUE) {
        @     g_AwaitAsyncFunction ();
        @     m_data->remove_NavigationCompleted(token);
        @ }

    }

    方法 导航2 <公开 折叠>
    参数 HTML内容 <类型 = 文本型>
    {
        @ m_data->NavigateToString (@<HTML内容>.GetText ());
    }

    方法 打开DevTools窗口 <公开 折叠>
    {
        @ m_data->OpenDevToolsWindow ();
    }

    方法 发送Web消息 <公开>
    参数 JSON消息 <类型 = 文本型>
    {
        @ if(!m_data) return ;
        @ m_data->PostWebMessageAsJson (@<JSON消息>.GetText ());
    }

    方法 发送Web消息2 <公开>
    参数 文本消息 <类型 = 文本型>
    {
        @ if(!m_data) return ;
        @ m_data->PostWebMessageAsString (@<文本消息>.GetText ());
    }

    方法 重新加载 <公开 折叠>
    {
        @ m_data->Reload ();
    }

    方法 停止加载 <公开 折叠>
    {
        @ m_data->Stop ();
    }

    方法 取Cookie管理器 <公开 折叠>
    参数 WebView2Cookie管理器 <类型 = WebView2Cookie管理器类 注释 = "输出参数">
    {
        @ ((ICoreWebView2_2*)m_data.get ())->get_CookieManager (&@<WebView2Cookie管理器>.m_data);
    }

    方法 取WebView2环境 <公开 折叠>
    参数 WebView2环境 <类型 = WebView2环境类 注释 = "输出参数">
    {
        @ ((ICoreWebView2_2*)m_data.get ())->get_Environment (&@<WebView2环境>.m_data);
        @ @<WebView2环境>.BindEvent ();
    }

    方法 导航3 <公开 折叠>
    参数 Web资源请求 <类型 = WebView2Web资源请求类>
    {
        @ ((ICoreWebView2_2*)m_data.get ())->NavigateWithWebResourceRequest (@<Web资源请求>.m_data.get ());
    }

    方法 是否挂起 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL isSuspended = FALSE;
        @ ((ICoreWebView2_3*)m_data.get ())->get_IsSuspended (&isSuspended);
        @ return isSuspended;
    }

    方法 恢复 <公开 折叠>
    {
        @ ((ICoreWebView2_3*)m_data.get ())->Resume ();
    }

    方法 尝试挂起 <公开 类型 = 逻辑型 注释 = "对应回调<尝试挂起完毕 ()>" 折叠>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        变量 是否成功 <类型 = 逻辑型 值 = 假>
        @ if (@<是否同步> == TRUE) {
        @ ((ICoreWebView2_3*)m_data.get ())->TrySuspend (
        @     Callback<ICoreWebView2TrySuspendCompletedHandler> (
        @         [&] (HRESULT errorCode, BOOL isSuccessful) -> HRESULT {
        @             @<是否成功> = isSuccessful;
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ ((ICoreWebView2_3*)m_data.get ())->TrySuspend (
        @     Callback<ICoreWebView2TrySuspendCompletedHandler> (
        @         [&] (HRESULT errorCode, BOOL isSuccessful) -> HRESULT {
        @             @<尝试挂起完毕> (isSuccessful, errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (是否成功)
    }

    方法 尝试挂起完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 是否成功 <类型 = 逻辑型>
    参数 错误码 <类型 = 整数>

    方法 打开任务管理器 <公开 折叠>
    {
        @ ((ICoreWebView2_6*)m_data.get ())->OpenTaskManagerWindow ();
    }

    方法 打印到PDF <公开 类型 = 逻辑型 注释 = "对应回调<打印到PDF完毕 ()>" 折叠>
    参数 文件路径 <类型 = 文本型>
    参数 打印设置 <类型 = WebView2打印设置类>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        变量 是否成功 <类型 = 逻辑型 值 = 假>
        @ if (@<是否同步> == TRUE) {
        @ ((ICoreWebView2_7*)m_data.get ())->PrintToPdf (
        @     @<文件路径>.GetText (),
        @     @<打印设置>.m_printSettings.get (),
        @     Callback<ICoreWebView2PrintToPdfCompletedHandler> (
        @         [&] (HRESULT errorCode, BOOL isSuccessful) -> HRESULT {
        @             @<是否成功> = isSuccessful;
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ ((ICoreWebView2_7*)m_data.get ())->PrintToPdf (
        @     @<文件路径>.GetText (),
        @     @<打印设置>.m_printSettings.get (),
        @     Callback<ICoreWebView2PrintToPdfCompletedHandler> (
        @         [&] (HRESULT errorCode, BOOL isSuccessful) -> HRESULT {
        @             @<打印到PDF完毕> (isSuccessful, errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (是否成功)
    }

    方法 打印到PDF完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 是否成功 <类型 = 逻辑型>
    参数 错误码 <类型 = 整数>

    方法 是否正在播放音频 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ ((ICoreWebView2_8*)m_data.get ())->get_IsDocumentPlayingAudio (&value);
        @ return value;
    }

    方法 是否静音 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ ((ICoreWebView2_8*)m_data.get ())->get_IsMuted (&value);
        @ return value;
    }

    方法 是否静音 <公开 属性写 折叠>
    参数 是否静音 <类型 = 逻辑型>
    {
        @ ((ICoreWebView2_8*)m_data.get ())->put_IsMuted (@<是否静音>);
    }

    方法 关闭下载对话框 <公开 折叠>
    {
        @ ((ICoreWebView2_9*)m_data.get ())->CloseDefaultDownloadDialog ();
    }

    方法 下载对话框角对齐方式 <公开 属性读 类型 = 整数 注释 = "0 表示 TOP_LEFT | 左上；" 注释 = "1 表示 TOP_RIGHT | 右上；"
            注释 = "1 表示 BOTTOM_LEFT | 左下；" 注释 = "1 表示 BOTTOM_RIGHT | 右下" 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT value;
        @ ((ICoreWebView2_9*)m_data.get ())->get_DefaultDownloadDialogCornerAlignment (&value);
        @ return value;
    }

    方法 下载对话框角对齐方式 <公开 属性写 折叠>
    参数 角对齐方式 <类型 = 整数 注释 = "0 表示 TOP_LEFT | 左上；" 注释 = "1 表示 TOP_RIGHT | 右上；" 注释 = "1 表示 BOTTOM_LEFT | 左下；"
            注释 = "1 表示 BOTTOM_RIGHT | 右下" 折叠2>
    {
        @ ((ICoreWebView2_9*)m_data.get ())->put_DefaultDownloadDialogCornerAlignment (
        @     (COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT)@<角对齐方式>);
    }

    方法 下载对话框边距 <公开 属性读 类型 = 位置类 折叠>
    {
        变量 位置 <类型 = 位置类>
        @ POINT value;
        @ ((ICoreWebView2_9*)m_data.get ())->get_DefaultDownloadDialogMargin (&value);
        @ @<位置.横向位置> = value.x;
        @ @<位置.纵向位置> = value.y;
        返回 (位置)
    }

    方法 下载对话框边距 <公开 属性写 折叠>
    参数 位置 <类型 = 位置类>
    {
        @ POINT value;
        @ value.x = @<位置.横向位置>;
        @ value.y = @<位置.纵向位置>;
        @ ((ICoreWebView2_9*)m_data.get ())->put_DefaultDownloadDialogMargin (value);
    }

    方法 下载对话框是否打开 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ ((ICoreWebView2_9*)m_data.get ())->get_IsDefaultDownloadDialogOpen (&value);
        @ return value;
    }

    方法 打开下载对话框 <公开 折叠>
    {
        @ ((ICoreWebView2_9*)m_data.get ())->OpenDefaultDownloadDialog ();
    }

    方法 调用DevTools方法2 <公开 类型 = 文本型 折叠>
    参数 会话ID <类型 = 文本型>
    参数 方法名称 <类型 = 文本型>
    参数 参数 <类型 = 文本型>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        变量 返回结果 <类型 = 文本型>
        @ if (@<是否同步> == TRUE) {
        @ ((ICoreWebView2_11*)m_data.get ())->CallDevToolsProtocolMethodForSession (
        @     @<会话ID>.GetText (),
        @     @<方法名称>.GetText (),
        @     @<参数>.GetText (),
        @     Callback<ICoreWebView2CallDevToolsProtocolMethodCompletedHandler> (
        @         [&] (HRESULT errorCode, LPCWSTR returnObjectAsJson) -> HRESULT {
        @             @<返回结果> = CVolString (returnObjectAsJson);
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ ((ICoreWebView2_11*)m_data.get ())->CallDevToolsProtocolMethodForSession (
        @     @<会话ID>.GetText (),
        @     @<方法名称>.GetText (),
        @     @<参数>.GetText (),
        @     Callback<ICoreWebView2CallDevToolsProtocolMethodCompletedHandler> (
        @         [&] (HRESULT errorCode, LPCWSTR returnObjectAsJson) -> HRESULT {
        @             @<调用DevTools方法完毕> (CVolString (returnObjectAsJson), errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (返回结果)
    }

    方法 状态栏文本 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ ((ICoreWebView2_12*)m_data.get ())->get_StatusBarText (&value);
        @ return value.get ();
    }

    方法 网站图标Url <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ ((ICoreWebView2_15*)m_data.get ())->get_FaviconUri (&value);
        @ return value.get ();
    }

    方法 取网站图标 <公开 类型 = 字节集类 注释 = "对应回调<取网站图标完毕 ()>" 折叠 @禁止流程检查 = 真>
    参数 图标格式 <类型 = 整数 注释 = "0 表示 PNG；" 注释 = "1 表示 JPEG" 折叠2 @默认值 = 0>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        变量 图标数据 <类型 = 字节集类>
        @ if (@<是否同步> == TRUE) {
        @ ((ICoreWebView2_15*)m_data.get ())->GetFavicon (
        @     (COREWEBVIEW2_FAVICON_IMAGE_FORMAT)@<图标格式>,
        @     Callback<ICoreWebView2GetFaviconCompletedHandler> (
        @         [&] (HRESULT errorCode, IStream* faviconStream) -> HRESULT {
        @             @<图标数据> = @<WebView2全局类.IStream到字节集> (faviconStream);
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ ((ICoreWebView2_15*)m_data.get ())->GetFavicon (
        @     (COREWEBVIEW2_FAVICON_IMAGE_FORMAT)@<图标格式>,
        @     Callback<ICoreWebView2GetFaviconCompletedHandler> (
        @         [&] (HRESULT errorCode, IStream* faviconStream) -> HRESULT {
        @             @<取网站图标完毕> (@<WebView2全局类.IStream到字节集> (faviconStream), errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (图标数据)
    }

    方法 取网站图标完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 图标数据 <类型 = 字节集类>
    参数 错误码 <类型 = 整数>

    方法 打印 <公开 注释 = "对应回调<打印完毕 ()>" 折叠>
    参数 打印设置 <类型 = WebView2打印设置类>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        @ if (@<是否同步> == TRUE) {
        @ ((ICoreWebView2_16*)m_data.get ())->Print (
        @     @<打印设置>.m_data.get ();
        @     Callback<ICoreWebView2PrintCompletedHandler> (
        @         [&] (HRESULT errorCode, COREWEBVIEW2_PRINT_STATUS printStatus) -> HRESULT {
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ ((ICoreWebView2_16*)m_data.get ())->Print (
        @     @<打印设置>.m_data.get ();
        @     Callback<ICoreWebView2PrintCompletedHandler> (
        @         [&] (HRESULT errorCode, COREWEBVIEW2_PRINT_STATUS printStatus) -> HRESULT {
        @             @<打印完毕> (printStatus, errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }

        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
    }

    方法 打印完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 打印状态 <类型 = 整数 注释 = "0 表示 SUCCEEDED | 成功；" 注释 = "1 表示 PRINTER_UNAVAILABLE | 打印机不可用；"
            注释 = "2 表示 OTHER_ERROR | 其他错误" 折叠2>
    参数 错误码 <类型 = 整数>

    方法 打印到PDF数据 <公开 类型 = 字节集类 注释 = "对应回调<打印到PDF数据完毕 ()>" 折叠>
    参数 打印设置 <类型 = WebView2打印设置类>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        变量 PDF数据 <类型 = 字节集类>
        @ if (@<是否同步> == TRUE) {
        @ ((ICoreWebView2_16*)m_data.get ())->PrintToPdfStream (
        @     @<打印设置>.m_printSettings.get ();
        @     Callback<ICoreWebView2PrintToPdfStreamCompletedHandler> (
        @         [&] (HRESULT errorCode, IStream* pdfStream) -> HRESULT {
        @             @<PDF数据> = @<WebView2全局类.IStream到字节集> (pdfStream);
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ ((ICoreWebView2_16*)m_data.get ())->PrintToPdfStream (
        @     @<打印设置>.m_printSettings.get ();
        @     Callback<ICoreWebView2PrintToPdfStreamCompletedHandler> (
        @         [&] (HRESULT errorCode, IStream* pdfStream) -> HRESULT {
        @             @<打印到PDF数据完毕> (@<WebView2全局类.IStream到字节集> (pdfStream), errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (PDF数据)
    }

    方法 打印到PDF数据完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 PDF数据 <类型 = 字节集类>
    参数 错误码 <类型 = 整数>

    方法 显示打印UI <公开 折叠>
    参数 打印对话框类型 <类型 = 整数 注释 = "0 表示 BROWSER | 浏览器；" 注释 = "1 表示 SYSTEM | 系统" 折叠2 @默认值 = 0>
    {
        @ ((ICoreWebView2_16*)m_data.get ())->ShowPrintUI ((COREWEBVIEW2_PRINT_DIALOG_KIND)@<打印对话框类型>);
    }

    # ---网页填表---

    方法 填表_网页_取源码 <公开 类型 = 文本型 折叠>
    {
        返回 (执行JS ("document.documentElement.outerHTML;"))
    }

    方法 填表_网页_取横向滚动条位置 <公开 类型 = 整数 折叠>
    {
        返回 (文本到整数 (执行JS ("document.documentElement.scrollLeft;")))
    }

    方法 填表_网页_取纵向滚动条位置 <公开 类型 = 整数 折叠>
    {
        返回 (文本到整数 (执行JS ("document.documentElement.scrollTop;")))
    }

    方法 填表_网页_置滚动条位置 <公开 折叠>
    参数 横向位置 <类型 = 整数>
    参数 纵向位置 <类型 = 整数>
    {
        执行JS ("window.scrollTo(" + 到文本 (横向位置) + ", " + 到文本 (纵向位置) + ");")
    }

    方法 填表_网页_取加载状态 <公开 类型 = 逻辑型 折叠>
    {
        返回 (执行JS ("document.readyState;") == "\"complete\"")
    }

    方法 填表_元素_取innerHTML <公开 类型 = 文本型 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        返回 (执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".innerHTML;"))
    }

    方法 填表_元素_取outerHTML <公开 类型 = 文本型 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        返回 (执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".outerHTML;"))
    }

    方法 填表_元素_取innerText <公开 类型 = 文本型 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        返回 (执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".innerText;"))
    }

    方法 填表_元素_取outerText <公开 类型 = 文本型 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        返回 (执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".outerText;"))
    }

    方法 填表_元素_取值 <公开 类型 = 文本型 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        返回 (执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".value;"))
    }

    方法 填表_元素_置值 <公开 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    参数 值内容 <类型 = 文本型>
    {
        执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".value = \"" + 值内容 + "\";")
    }

    方法 填表_元素_点击 <公开 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".click();")
    }

    方法 填表_元素_取属性 <公开 类型 = 文本型>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    参数 属性名 <类型 = 文本型>
    {
        返回 (执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".getAttribute(\"" + 属性名 + "\");"))
    }

    方法 填表_元素_取或置元素属性 <公开 类型 = 文本型>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    参数 属性内容 <类型 = 文本型>
    {
        返回 (执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + "." + 属性内容 + ";"))
    }

    方法 填表_元素_取数量 <公开 类型 = 整数 折叠>
    参数 元素选择器 <类型 = 文本型>
    {
        返回 (文本到整数 (执行JS ("document.querySelectorAll(\"" + 元素选择器 + "\").length;")))
    }

    方法 填表_元素_取矩形 <公开 类型 = 矩形类 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        变量 返回值 <类型 = 文本型>
        变量 JSON <类型 = PivJSON>
        变量 矩形 <类型 = 矩形类>
        返回值 = 执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".getBoundingClientRect().toJSON();")
        JSON.解析 (返回值)
        矩形.左边 = JSON.取成员整数 ("left")
        矩形.左边 = JSON.取成员整数 ("left")
        矩形.顶边 = JSON.取成员整数 ("top")
        矩形.右边 = JSON.取成员整数 ("right")
        矩形.底边 = JSON.取成员整数 ("bottom")
        返回 (矩形)
    }

    方法 填表_组合框_枚举项目文本 <公开 类型 = 文本数组类 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        变量 标记分割点 <类型 = 文本型 值 = "$标记分割点" 编辑时信息 = "0, D641F, 0, 0">
        变量 JS脚本 <类型 = 文本型
                值 = "let res = \"\";\r\nlet obj = document.querySelectorAll(\"%s\")[%d];\r\nfor (let i = 0; i < obj.length; i++) {\r\n    res = res + obj.options[i].text + \"%s\";\r\n}"
                编辑时信息 = "0, D641F, 0, 0">
        变量 项目文本数组 <类型 = 文本数组类>
        JS脚本 = 取格式文本 (JS脚本, 元素选择器, 元素索引, 标记分割点)
        分割子文本 (执行JS (JS脚本), 标记分割点, 项目文本数组)
        返回 (项目文本数组)
    }

    方法 填表_组合框_取现行选中项 <公开 类型 = 整数 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        返回 (文本到整数 (执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".selectedIndex;")))
    }

    方法 填表_组合框_置现行选中项 <公开 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    参数 现行选中项 <类型 = 整数>
    {
        执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".selectedIndex = " + 到文本 (现行选中项) + ";")
    }

    方法 填表_选择框_取选中状态 <公开 类型 = 逻辑型 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        返回 (执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".checked;") == "true")
    }

    方法 填表_选择框_置选中状态 <公开 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    参数 选中状态 <类型 = 逻辑型>
    {
        执行JS (WebView2辅助函数.取JS元素 (元素选择器, 元素索引) + ".checked = " + 选择 (选中状态, "true", "false") + ";")
    }

    #
}

类 WebView2框架类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2Frame> m_data;
    # inline_ @sn<current_class> (ICoreWebView2Frame* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # void BindEvent ();
    # <> </include>
    # void @sn<current_class>::BindEvent () {
    #     // 被销毁
    #     m_data->add_Destroyed (
    #         Callback<ICoreWebView2FrameDestroyedEventHandler> (
    #             [&] (ICoreWebView2Frame* sender, IUnknown* args)->HRESULT {
    #                 @<被销毁> ();
    #                 delete this;
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 名称被改变
    #     m_data->add_NameChanged (
    #         Callback<ICoreWebView2FrameNameChangedEventHandler> (
    #             [&] (ICoreWebView2Frame* sender, IUnknown* args)->HRESULT {
    #                 @<名称被改变> (@<名称> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 内容即将加载
    #     ((ICoreWebView2Frame2*)m_data.get ())->add_ContentLoading (
    #         Callback<ICoreWebView2FrameContentLoadingEventHandler> (
    #             [&] (ICoreWebView2Frame* sender, ICoreWebView2ContentLoadingEventArgs* args)->HRESULT {
    #                 UINT64 navigationId;
    #                 args->get_NavigationId (&navigationId);
    #                 BOOL isErrorPage;
    #                 args->get_IsErrorPage (&isErrorPage);
    #                 @<内容即将加载> ((INT64)navigationId, isErrorPage);
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // DOM内容被加载
    #     ((ICoreWebView2Frame2*)m_data.get ())->add_DOMContentLoaded (
    #         Callback<ICoreWebView2FrameDOMContentLoadedEventHandler> (
    #             [&] (ICoreWebView2Frame* sender, ICoreWebView2DOMContentLoadedEventArgs* args)->HRESULT {
    #                 UINT64 navigationId;
    #                 args->get_NavigationId (&navigationId);
    #                 @<DOM内容被加载> ((INT64)navigationId);
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 导航完毕
    #     ((ICoreWebView2Frame2*)m_data.get ())->add_NavigationCompleted (
    #         Callback<ICoreWebView2FrameNavigationCompletedEventHandler> (
    #             [&] (ICoreWebView2Frame* sender, ICoreWebView2NavigationCompletedEventArgs* args)->HRESULT {
    #                 UINT64 navigationId;
    #                 args->get_NavigationId (&navigationId);
    #                 BOOL isSuccess;
    #                 args->get_IsSuccess (&isSuccess);
    #                 INT http_status_code;
    #                 ((ICoreWebView2NavigationCompletedEventArgs2*)args)->get_HttpStatusCode (&http_status_code);
    #                 COREWEBVIEW2_WEB_ERROR_STATUS webErrorStatus;
    #                 args->get_WebErrorStatus (&webErrorStatus);
    #                 @<导航完毕> ((INT64)navigationId, isSuccess, http_status_code, webErrorStatus);
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 导航即将开始
    #     ((ICoreWebView2Frame2*)m_data.get ())->add_NavigationStarting (
    #         Callback<ICoreWebView2FrameNavigationStartingEventHandler> (
    #             [&] (ICoreWebView2Frame* sender, ICoreWebView2NavigationStartingEventArgs* args)->HRESULT {
    #                 @<导航即将开始> (@dt<事件参数_导航即将开始>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 收到Web消息
    #     ((ICoreWebView2Frame2*)m_data.get ())->add_WebMessageReceived (
    #         Callback<ICoreWebView2FrameWebMessageReceivedEventHandler> (
    #             [&] (ICoreWebView2Frame* sender, ICoreWebView2WebMessageReceivedEventArgs* args)->HRESULT {
    #                 @<收到Web消息> (@dt<事件参数_收到Web消息>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 请求权限
    #     ((ICoreWebView2Frame3*)m_data.get ())->add_PermissionRequested (
    #         Callback<ICoreWebView2FramePermissionRequestedEventHandler> (
    #             [&] (ICoreWebView2Frame* sender, ICoreWebView2PermissionRequestedEventArgs2* args)->HRESULT {
    #                 @<请求权限> (@dt<事件参数_请求权限2>(args));
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #
    # }
    # @end

    方法 被销毁 <公开 定义事件 类型 = 整数>

    方法 名称被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 名称 <类型 = 文本型>

    方法 内容即将加载 <公开 定义事件 类型 = 整数 折叠>
    参数 导航ID <类型 = 长整数>
    参数 是否为错误页 <类型 = 逻辑型>

    方法 DOM内容被加载 <公开 定义事件 类型 = 整数 折叠>
    参数 导航ID <类型 = 长整数>

    方法 导航完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 导航ID <类型 = 长整数>
    参数 是否成功 <类型 = 逻辑型>
    参数 HTTP状态码 <类型 = 整数>
    参数 Web错误状态 <类型 = 整数>

    方法 导航即将开始 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_导航即将开始>

    方法 收到Web消息 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_收到Web消息>

    方法 请求权限 <公开 定义事件 类型 = 整数 折叠>
    参数 事件参数 <类型 = 事件参数_请求权限2>

    方法 名称 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string name;
        @ m_data->get_Name (&name);
        @ return name.get ();
    }

    方法 是否被销毁 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL destroyed = FALSE;
        @ m_data->IsDestroyed(&destroyed);
        @ return destroyed;
    }

    方法 执行JS <公开 类型 = 文本型 注释 = "对应回调<执行JS完毕 ()>" 折叠>
    参数 JS脚本 <类型 = 文本型>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        变量 返回结果 <类型 = 文本型>
        @ if (@<是否同步> == TRUE) {
        @ ((ICoreWebView2Frame2*)m_data.get ())->ExecuteScript (
        @     @<JS脚本>.GetText (),
        @     Callback<ICoreWebView2ExecuteScriptCompletedHandler> (
        @         [&] (HRESULT errorCode, PCWSTR resultObjectAsJson)->HRESULT {
        @             @<返回结果> = CVolString (resultObjectAsJson);
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ ((ICoreWebView2Frame2*)m_data.get ())->ExecuteScript (
        @     @<JS脚本>.GetText (),
        @     Callback<ICoreWebView2ExecuteScriptCompletedHandler> (
        @         [&] (HRESULT errorCode, PCWSTR resultObjectAsJson)->HRESULT {
        @             @<执行JS完毕> (CVolString (resultObjectAsJson), errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (返回结果)
    }

    方法 执行JS完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 返回结果 <类型 = 文本型>
    参数 错误码 <类型 = 整数>

    方法 发送Web消息 <公开 折叠>
    参数 JSON消息 <类型 = 文本型>
    {
        @ ((ICoreWebView2Frame2*)m_data.get ())->PostWebMessageAsJson (@<JSON消息>.GetText ());
    }

    方法 发送Web消息2 <公开 折叠>
    参数 文本消息 <类型 = 文本型>
    {
        @ ((ICoreWebView2Frame2*)m_data.get ())->PostWebMessageAsString (@<文本消息>.GetText ());
    }
}

类 WebView2Web资源响应视图类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2WebResourceResponseView> m_data;
    # inline_ @sn<current_class> (ICoreWebView2WebResourceResponseView* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 取响应头 <公开 折叠 @禁止流程检查 = 真>
    参数 WebView2HTTP响应头 <类型 = WebView2Http响应头类 注释 = "输出参数">
    {
        @ m_data->get_Headers (&@<WebView2HTTP响应头>.m_data);
    }

    方法 原因短语 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string reasonPhrase;
        @ m_data->get_ReasonPhrase (&reasonPhrase);
        @ return reasonPhrase.get ();
    }

    方法 状态码 <公开 属性读 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ INT statusCode = 0;
        @ m_data->get_StatusCode (&statusCode);
        @ return statusCode;
    }

    方法 取内容数据 <公开 类型 = 字节集类 注释 = "对应回调<取内容数据完毕 ()>" 折叠 @禁止流程检查 = 真>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        变量 内容数据 <类型 = 字节集类>
        @ if (@<是否同步> == TRUE) {
        @ m_data->GetContent (
        @     Callback<ICoreWebView2WebResourceResponseViewGetContentCompletedHandler> (
        @         [&] (HRESULT errorCode, IStream* content) -> HRESULT {
        @             @<内容数据> = @<WebView2全局类.IStream到字节集> ((INT_P)content);
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ m_data->GetContent (
        @     Callback<ICoreWebView2WebResourceResponseViewGetContentCompletedHandler> (
        @         [&] (HRESULT errorCode, IStream* content) -> HRESULT {
        @             @<取内容数据完毕> (@<WebView2全局类.IStream到字节集> ((INT_P)content), errorCode);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (内容数据)

    }

    方法 取内容数据完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 内容数据 <类型 = 字节集类>
    参数 错误码 <类型 = 整数>
}

类 WebView2下载操作类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2DownloadOperation> m_data;
    # inline_ @sn<current_class> (ICoreWebView2DownloadOperation* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # void BindEvent ();
    # <> </include>
    # void @sn<current_class>::BindEvent () {
    #     // 收到字节数被改变
    #     m_data->add_BytesReceivedChanged (
    #         Callback<ICoreWebView2BytesReceivedChangedEventHandler> (
    #             [&] (ICoreWebView2DownloadOperation* download, IUnknown* args)->HRESULT {
    #                 @<收到字节数被改变> (@<收到字节数> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 预计结束时间被改变
    #     m_data->add_EstimatedEndTimeChanged (
    #         Callback<ICoreWebView2EstimatedEndTimeChangedEventHandler> (
    #             [&] (ICoreWebView2DownloadOperation* download, IUnknown* args)->HRESULT {
    #                 @<预计结束时间被改变> (@<预计结束时间> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #     // 状态被改变
    #     m_data->add_StateChanged (
    #         Callback<ICoreWebView2StateChangedEventHandler> (
    #             [&] (ICoreWebView2DownloadOperation* download, IUnknown* args)->HRESULT {
    #                 @<状态被改变> (@<下载状态> ());
    #                 return S_OK;
    #             }).Get (), nullptr
    #     );
    #
    # }
    # @end

    方法 收到字节数被改变 <公开 定义事件 类型 = 整数>
    参数 收到字节数 <类型 = 长整数>

    方法 预计结束时间被改变 <公开 定义事件 类型 = 整数>
    参数 预计结束时间 <类型 = 文本型>

    方法 状态被改变 <公开 定义事件 类型 = 整数 折叠>
    参数 下载状态 <类型 = 整数>

    方法 取消 <公开 折叠>
    {
        @ m_data->Cancel ();
    }

    方法 收到字节数 <公开 属性读 类型 = 长整数 折叠 @禁止流程检查 = 真>
    {
        @ INT64 bytesReceived = 0;
        @ m_data->get_BytesReceived (&bytesReceived);
        @ return bytesReceived;
    }

    方法 能否恢复下载 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL canResume = FALSE;
        @ m_data->get_CanResume (&canResume);
        @ return canResume;
    }

    方法 内容部署 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string contentDisposition;
        @ m_data->get_ContentDisposition (&contentDisposition);
        @ return contentDisposition.get ();
    }

    方法 预计结束时间 <公开 属性读 类型 = 文本型 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string estimatedEndTime;
        @ m_data->get_EstimatedEndTime (&estimatedEndTime);
        @ return estimatedEndTime.get ();
    }

    方法 断开原因 <公开 属性读 类型 = 整数
            返回值注释 = "https://learn.microsoft.com/zh-cn/microsoft-WebView2/webview2/reference/win32/webview2-idl?view=webview2-1.0.2151.40#corewebview2_download_interrupt_reason"
            折叠 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON interruptReason;
        @ m_data->get_InterruptReason (&interruptReason);
        @ return interruptReason;
    }

    方法 MIME类型 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string mimeType;
        @ m_data->get_MimeType (&mimeType);
        @ return mimeType.get ();
    }

    方法 结果文件路径 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string resultFilePath;
        @ m_data->get_ResultFilePath (&resultFilePath);
        @ return resultFilePath.get ();
    }

    方法 下载状态 <公开 属性读 类型 = "整数 " 注释 = "0 表示 IN_PROGRESS | 正在下载；" 注释 = "1 表示 INTERRUPTED | 已断开；"
            注释 = "2 表示 COMPLETED | 已完成" 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_DOWNLOAD_STATE interruptReason;
        @ m_data->get_State (&interruptReason);
        @ return interruptReason;
    }

    方法 总字节数 <公开 属性读 类型 = 长整数 折叠 @禁止流程检查 = 真>
    {
        @ INT64 totalBytesToReceive = 0;
        @ m_data->get_TotalBytesToReceive (&totalBytesToReceive);
        @ return totalBytesToReceive;
    }

    方法 Url <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string uri;
        @ m_data->get_Uri (&uri);
        @ return uri.get ();
    }

    方法 暂停 <公开 折叠>
    {
        @ m_data->Pause ();
    }

    方法 恢复 <公开 折叠>
    {
        @ m_data->Resume ();
    }
}

类 WebView2菜单目标类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2ContextMenuTarget> m_data;
    # inline_ @sn<current_class> (ICoreWebView2ContextMenuTarget* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 框架URL <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_FrameUri (&value);
        @ return value.get ();
    }

    方法 是否存在连接文本 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_HasLinkText (&value);
        @ return value;
    }

    方法 是否存在连接URL <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_HasLinkUri (&value);
        @ return value;
    }

    方法 是否存在选择 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_HasSelection (&value);
        @ return value;
    }

    方法 是否存在URL <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_HasSourceUri (&value);
        @ return value;
    }

    方法 是否可编辑 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_IsEditable (&value);
        @ return value;
    }

    方法 是否在主框架上请求 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_IsRequestedForMainFrame (&value);
        @ return value;
    }

    方法 类型 <公开 属性读 类型 = 整数 注释 = "0 表示 PAGE | 页面；" 注释 = "1 表示 IMAGE | 图像；"
            注释 = "2 表示 SELECTED_TEXT | 被选择的文本；" 注释 = "3 表示 AUDIO | 音频；" 注释 = "4 表示 VIDEO | 视频" 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_CONTEXT_MENU_TARGET_KIND value;
        @ m_data->get_Kind (&value);
        @ return value;
    }

    方法 连接文本 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_LinkText (&value);
        @ return value.get ();
    }

    方法 连接URL <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_LinkUri (&value);
        @ return value.get ();
    }

    方法 页面URL <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_PageUri (&value);
        @ return value.get ();
    }

    方法 选择文本 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_SelectionText (&value);
        @ return value.get ();
    }

    方法 URL <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_SourceUri (&value);
        @ return value.get ();
    }
}

类 WebView2Cookie管理器类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2CookieManager> m_data;
    # inline_ @sn<current_class> (ICoreWebView2CookieManager* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 添加或更新Cookie <公开 折叠>
    参数 Cookie <类型 = WebView2Cookie类>
    {
        @ m_data->AddOrUpdateCookie (@<Cookie>.m_data.get ());
    }

    方法 复制Cookie <公开 折叠>
    参数 WebView2Cookie <类型 = WebView2Cookie类 注释 = "输出参数">
    参数 Cookie <类型 = WebView2Cookie类>
    {
        @ m_data->CopyCookie (@<Cookie>.m_data.get (), &@<WebView2Cookie>.m_data);
    }

    方法 创建Cookie <公开 折叠 @禁止流程检查 = 真>
    参数 WebView2Cookie <类型 = WebView2Cookie类 注释 = "输出参数">
    参数 名称 <类型 = 文本型>
    参数 值 <类型 = 文本型>
    参数 域 <类型 = 文本型>
    参数 路径 <类型 = 文本型>
    {
        @ m_data->CreateCookie (
        @     @<名称>.GetText (),
        @     @<值>.GetText (),
        @     @<域>.GetText (),
        @     @<路径>.GetText (),
        @     &@<WebView2Cookie>.m_data);
    }

    方法 删除全部Cookies <公开 折叠>
    {
        @ m_data->DeleteAllCookies ();
    }

    方法 删除Cookie <公开 折叠>
    参数 Cookie <类型 = WebView2Cookie类>
    {
        @ m_data->DeleteCookie (@<Cookie>.m_data.get ());
    }

    方法 删除Cookies <公开 折叠>
    参数 名称 <类型 = 文本型>
    参数 URL <类型 = 文本型>
    {
        @ m_data->DeleteCookies (@<名称>.GetText (), @<URL>.GetText ());
    }

    方法 删除Cookies2 <公开 折叠>
    参数 名称 <类型 = 文本型>
    参数 域 <类型 = 文本型>
    参数 路径 <类型 = 文本型>
    {
        @ m_data->DeleteCookiesWithDomainAndPath (
        @     @<名称>.GetText (),
        @     @<域>.GetText (),
        @     @<路径>.GetText ());
    }

    方法 取Cookies <公开 类型 = WebView2Cookie列表类 注释 = "对应回调<取Cookies完毕 ()>" 折叠>
    参数 URL <类型 = 文本型>
    参数 是否同步 <类型 = 逻辑型 @默认值 = 真>
    {
        变量 Cookie列表 <类型 = WebView2Cookie列表类>
        @ if (@<是否同步> == TRUE) {
        @ m_data->GetCookies (
        @     @<URL>.GetText (),
        @     Callback<ICoreWebView2GetCookiesCompletedHandler> (
        @         [&] (HRESULT result, ICoreWebView2CookieList* cookieList)->HRESULT {
        @             @<Cookie列表>.m_data = cookieList;
        @             g_isCompleted = true;
        @             return S_OK;
        @         }).Get ());
        @ }
        @ else {
        @ m_data->GetCookies (
        @     @<URL>.GetText (),
        @     Callback<ICoreWebView2GetCookiesCompletedHandler> (
        @         [&] (HRESULT result, ICoreWebView2CookieList* cookieList)->HRESULT {
        @             @<取Cookies完毕> (@dt<WebView2Cookie列表类> (cookieList), result);
        @             return S_OK;
        @         }).Get ());
        @ }
        @ if (@<是否同步> == TRUE) g_AwaitAsyncFunction ();
        返回 (Cookie列表)
    }

    方法 取Cookies完毕 <公开 定义事件 类型 = 整数 折叠>
    参数 Cookie列表 <类型 = WebView2Cookie列表类>
    参数 错误码 <类型 = 整数>
}

类 WebView2Cookie列表类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2CookieList> m_data;
    # inline_ @sn<current_class> (ICoreWebView2CookieList* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 取成员数 <公开 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ UINT count = 0;
        @ m_data->get_Count (&count);
        @ return (INT)count;
    }

    方法 取成员 <公开 折叠 @禁止流程检查 = 真>
    参数 WebView2Cookie <类型 = WebView2Cookie类 注释 = "输出参数" "">
    参数 索引 <类型 = 整数>
    {
        @ m_data->GetValueAtIndex ((UINT)@<索引>, &@<WebView2Cookie>.m_data);
    }
}

类 WebView2Cookie类 <公开 折叠>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2Cookie> m_data;
    # inline_ @sn<current_class> (ICoreWebView2Cookie* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 域 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string domain;
        @ m_data->get_Domain (&domain);
        @ return domain.get ();
    }

    方法 Expires <公开 属性读 类型 = 小数 折叠 @禁止流程检查 = 真>
    {
        @ double expires = 0;
        @ m_data->get_Expires (&expires);
        @ return expires;
    }

    方法 Expires <公开 属性写 折叠>
    参数 expires <类型 = 小数>
    {
        @ m_data->put_Expires (@<expires>);
    }

    方法 是否为HttpOnly <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL isHttpOnly = FALSE;
        @ m_data->get_IsHttpOnly (&isHttpOnly);
        @ return isHttpOnly;
    }

    方法 是否为HttpOnly <公开 属性写 折叠>
    参数 isHttpOnly <类型 = 逻辑型>
    {
        @ m_data->put_IsHttpOnly (@<isHttpOnly>);
    }

    方法 是否为Secure <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL isSecure = FALSE;
        @ m_data->get_IsSecure (&isSecure);
        @ return isSecure;
    }

    方法 是否为Secure <公开 属性写 折叠>
    参数 isSecure <类型 = 逻辑型>
    {
        @ m_data->put_IsSecure (@<isSecure>);
    }

    方法 是否为Session <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL isSession = FALSE;
        @ m_data->get_IsSession (&isSession);
        @ return isSession;
    }

    方法 名称 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string name;
        @ m_data->get_Name (&name);
        @ return name.get ();
    }

    方法 路径 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string path;
        @ m_data->get_Path (&path);
        @ return path.get ();
    }

    方法 SameSite <公开 属性读 类型 = 整数 注释 = "0 表示 NONE；" 注释 = "1 表示 LAX；" 注释 = "2 表示 STRICT" 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_COOKIE_SAME_SITE_KIND sameSite;
        @ m_data->get_SameSite (&sameSite);
        @ return sameSite;
    }

    方法 SameSite <公开 属性写 折叠>
    参数 sameSite <类型 = 整数 注释 = "0 表示 NONE；" 注释 = "1 表示 LAX；" 注释 = "2 表示 STRICT" 折叠2>
    {
        @ m_data->put_SameSite ((COREWEBVIEW2_COOKIE_SAME_SITE_KIND)@<sameSite>);
    }

    方法 值 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ m_data->get_Value (&value);
        @ return value.get ();
    }

    方法 值 <公开 属性写 折叠>
    参数 值 <类型 = 文本型>
    {
        @ m_data->put_Value (@<值>.GetText ());
    }
}

类 WebView2设置类 <公开>
{
    方法 是否为空 <公开 类型 = "逻辑型 " 折叠 @禁止流程检查 = 真>
    {
        @ return m_data == nullptr;
    }

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2Settings> m_data;
    # inline_ @sn<current_class> (ICoreWebView2Settings* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 是否启用默认菜单 <公开 属性读 类型 = 逻辑型 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ m_data->get_AreDefaultContextMenusEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用默认JS对话框 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ m_data->get_AreDefaultScriptDialogsEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用DevTools <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ m_data->get_AreDevToolsEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用内置错误页 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ m_data->get_IsBuiltInErrorPageEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用JS <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ m_data->get_IsScriptEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用状态栏 <公开 属性读 类型 = 逻辑型 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ m_data->get_IsStatusBarEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用Web消息 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ m_data->get_IsWebMessageEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用缩放 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ m_data->get_IsZoomControlEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用默认菜单 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ m_data->put_AreDefaultContextMenusEnabled (@<是否启用>);
    }

    方法 是否启用默认JS对话框 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ m_data->put_AreDefaultScriptDialogsEnabled (@<是否启用>);
    }

    方法 是否启用DevTools <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ m_data->put_AreDevToolsEnabled (@<是否启用>);
    }

    方法 是否启用内置错误页 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ m_data->put_IsBuiltInErrorPageEnabled (@<是否启用>);
    }

    方法 是否启用JS <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ m_data->put_IsScriptEnabled (@<是否启用>);
    }

    方法 是否启用状态栏 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ m_data->put_IsStatusBarEnabled (@<是否启用>);
    }

    方法 是否启用Web消息 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ m_data->put_IsWebMessageEnabled (@<是否启用>);
    }

    方法 是否启用缩放 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ m_data->put_IsZoomControlEnabled (@<是否启用>);
    }

    方法 UA <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string userAgent;
        @ ((ICoreWebView2Settings2*)m_data.get ())->get_UserAgent (&userAgent);
        @ return userAgent.get ();
    }

    方法 UA <公开 属性写 折叠>
    参数 UA <类型 = 文本型>
    {
        @ ((ICoreWebView2Settings2*)m_data.get ())->put_UserAgent (@<UA>.GetText ());
    }

    方法 是否启用快捷键 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ ((ICoreWebView2Settings3*)m_data.get ())->get_AreBrowserAcceleratorKeysEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用快捷键 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ ((ICoreWebView2Settings3*)m_data.get ())->put_AreBrowserAcceleratorKeysEnabled (@<是否启用>);
    }

    方法 是否启用自动填充 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ ((ICoreWebView2Settings4*)m_data.get ())->get_IsGeneralAutofillEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用自动填充 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ ((ICoreWebView2Settings4*)m_data.get ())->put_IsGeneralAutofillEnabled (@<是否启用>);
    }

    方法 是否启用自动保存密码 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL enabled = FALSE;
        @ ((ICoreWebView2Settings4*)m_data.get ())->get_IsPasswordAutosaveEnabled (&enabled);
        @ return enabled;
    }

    方法 是否启用自动保存密码 <公开 属性写 折叠>
    参数 是否启用 <类型 = 逻辑型>
    {
        @ ((ICoreWebView2Settings4*)m_data.get ())->put_IsPasswordAutosaveEnabled (@<是否启用>);
    }

    方法 隐藏PDF工具栏项 <公开 属性读 类型 = 整数 注释 = "0 表示 NONE | 空；" 注释 = "1 表示 SAVE | 保存；" 注释 = "2 表示 PRINT | 打印；"
            注释 = "3 表示 AVE_AS | 另存为；" 注释 = "4 表示 ZOOM_IN | 放大；" 注释 = "5 表示 ZOOM_OUT | 缩小；"
            注释 = "6 表示 ROTATE | 旋转；" 注释 = "7 表示 FIT_PAGE | FIT页面；" 注释 = "8 表示 PAGE_LAYOUT | 页面布局；"
            注释 = "9 表示 BOOKMARKS | 书签；" 注释 = "10 表示 PAGE_SELECTOR | 页面选择器；" 注释 = "11 表示 SEARCH | 搜索" 折叠 折叠2
            @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_PDF_TOOLBAR_ITEMS hidden_pdf_toolbar_items;
        @ ((ICoreWebView2Settings7*)m_data.get ())->get_HiddenPdfToolbarItems (&hidden_pdf_toolbar_items);
        @ return hidden_pdf_toolbar_items;
    }

    方法 隐藏PDF工具栏项 <公开 属性写 折叠>
    参数 PDF工具栏项 <类型 = 整数 注释 = "0 表示 NONE | 空；" 注释 = "1 表示 SAVE | 保存；" 注释 = "2 表示 PRINT | 打印；"
            注释 = "3 表示 AVE_AS | 另存为；" 注释 = "4 表示 ZOOM_IN | 放大；" 注释 = "5 表示 ZOOM_OUT | 缩小；"
            注释 = "6 表示 ROTATE | 旋转；" 注释 = "7 表示 FIT_PAGE | FIT页面；" 注释 = "8 表示 PAGE_LAYOUT | 页面布局；"
            注释 = "9 表示 BOOKMARKS | 书签；" 注释 = "10 表示 PAGE_SELECTOR | 页面选择器；" 注释 = "11 表示 SEARCH | 搜索" 折叠2>
    {
        @ ((ICoreWebView2Settings7*)m_data.get ())->put_HiddenPdfToolbarItems ((COREWEBVIEW2_PDF_TOOLBAR_ITEMS)@<PDF工具栏项>);
    }
}

# ---

类 WebView2物理键状态 <公开 折叠>
{
    变量 RepeatCount <公开 类型 = 整数>
    变量 ScanCode <公开 类型 = 整数>
    变量 IsExtendedKey <公开 类型 = 逻辑型>
    变量 IsMenuKeyDown <公开 类型 = 逻辑型>
    变量 WasKeyDown <公开 类型 = 逻辑型>
    变量 IsKeyReleased <公开 类型 = 逻辑型>
}

# ---

类 事件参数_快捷键被按下 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2AcceleratorKeyPressedEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2AcceleratorKeyPressedEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 处理 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL handled = FALSE;
        @ m_data->get_Handled (&handled);
        @ return handled;
    }

    方法 处理 <公开 属性写 折叠>
    参数 处理 <类型 = 逻辑型>
    {
        @ m_data->put_Handled (@<处理>);
    }

    方法 键事件类型 <公开 属性读 类型 = 整数 注释 = "0 表示 KEY_DOWN | 键按下；" 注释 = "1 表示 KEY_UP | 键放开；"
            注释 = "2 表示 SYSTEM_KEY_DOWN | 系统键按下；" 注释 = "3 表示 SYSTEM_KEY_UP | 系统键放开" 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_KEY_EVENT_KIND keyEventKind;
        @ m_data->get_KeyEventKind (&keyEventKind);
        @ return keyEventKind;
    }

    方法 键事件消息值 <公开 属性读 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ INT lParam = 0;
        @ m_data->get_KeyEventLParam (&lParam);
        @ return lParam;
    }

    方法 物理键状态 <公开 属性读 类型 = WebView2物理键状态 折叠>
    {
        变量 physicalKeyStatus <类型 = WebView2物理键状态>
        @ COREWEBVIEW2_PHYSICAL_KEY_STATUS physicalKeyStatus;
        @ m_data->get_PhysicalKeyStatus (&physicalKeyStatus);
        @ @<physicalKeyStatus.RepeatCount> = physicalKeyStatus.RepeatCount;
        @ @<physicalKeyStatus.ScanCode> = physicalKeyStatus.ScanCode;
        @ @<physicalKeyStatus.IsExtendedKey> = physicalKeyStatus.IsExtendedKey;
        @ @<physicalKeyStatus.IsMenuKeyDown> = physicalKeyStatus.IsMenuKeyDown;
        @ @<physicalKeyStatus.WasKeyDown> = physicalKeyStatus.WasKeyDown;
        @ @<physicalKeyStatus.IsKeyReleased> = physicalKeyStatus.IsKeyReleased;
        返回 (physicalKeyStatus)
    }

    方法 虚拟键 <公开 属性读 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ UINT virtualKey = 0;
        @ m_data->get_VirtualKey (&virtualKey);
        @ return (INT)virtualKey;
    }
}

类 事件参数_请求移动焦点 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2MoveFocusRequestedEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2MoveFocusRequestedEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 处理 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL handled = FALSE;
        @ m_data->get_Handled (&handled);
        @ return handled;
    }

    方法 处理 <公开 属性写 折叠>
    参数 处理 <类型 = 逻辑型>
    {
        @ m_data->put_Handled (@<处理>);
    }

    方法 移动焦点原因 <公开 属性读 类型 = 整数 注释 = "0 表示 PROGRAMMATIC | 计划的；" 注释 = "1 表示 NEXT | 下一个；"
            注释 = "2 表示 PREVIOUS | 上一个" 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_MOVE_FOCUS_REASON reason;
        @ m_data->get_Reason (&reason);
        @ return reason;
    }
}

类 事件参数_导航即将开始 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2NavigationStartingEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2NavigationStartingEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 取消 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL cancel = FALSE;
        @ m_data->get_Cancel (&cancel);
        @ return cancel;
    }

    方法 取消 <公开 属性写 折叠 @禁止流程检查 = 真>
    参数 取消 <类型 = 逻辑型>
    {
        @ m_data->put_Cancel (@<取消>);
    }

    方法 是否重定向 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL isRedirected = FALSE;
        @ m_data->get_IsRedirected (&isRedirected);
        @ return isRedirected;
    }

    方法 是否为用户手势 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL isUserInitiated = FALSE;
        @ m_data->get_IsUserInitiated (&isUserInitiated);
        @ return isUserInitiated;
    }

    方法 导航ID <公开 属性读 类型 = 长整数 折叠 @禁止流程检查 = 真>
    {
        @ UINT64 navigationId = 0;
        @ m_data->get_NavigationId (&navigationId);
        @ return (INT64)navigationId;
    }

    方法 取请求头 <公开 折叠 @禁止流程检查 = 真>
    参数 WebView2HTTP请求头 <类型 = WebView2Http请求头类 注释 = "输出参数">
    {
        @ m_data->get_RequestHeaders(&@<WebView2HTTP请求头>.m_data);
    }

    方法 URL <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string uri;
        @ m_data->get_Uri (&uri);
        @ return uri.get ();
    }
}

类 事件参数_打开新窗口 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2NewWindowRequestedEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2NewWindowRequestedEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 处理 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL handled = FALSE;
        @ m_data->get_Handled (&handled);
        @ return handled;
    }

    方法 处理 <公开 属性写 折叠 @禁止流程检查 = 真>
    参数 处理 <类型 = 逻辑型>
    {
        @ m_data->put_Handled (@<处理>);
    }

    方法 是否为用户手势 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL isUserInitiated = FALSE;
        @ m_data->get_IsUserInitiated (&isUserInitiated);
        @ return isUserInitiated;
    }

    方法 取新窗口 <公开 折叠 @禁止流程检查 = 真>
    参数 WebView2浏览框 <类型 = WebView2浏览框类 注释 = "输出参数">
    {
        @ m_data->get_NewWindow (&@<WebView2浏览框>.m_data);
    }

    方法 置新窗口 <公开 折叠 @禁止流程检查 = 真>
    参数 WebView2浏览框 <类型 = WebView2浏览框类>
    {
        @ m_data->put_NewWindow (@<WebView2浏览框>.m_data.get ());
    }

    方法 URL <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string uri;
        @ m_data->get_Uri (&uri);
        @ return uri.get ();
    }

    方法 名称 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string value;
        @ ((ICoreWebView2NewWindowRequestedEventArgs2*)m_data.get ())->get_Name (&value);
        @ return value.get ();
    }
}

类 事件参数_请求权限 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2PermissionRequestedEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2PermissionRequestedEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 是否为用户手势 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL isUserInitiated = FALSE;
        @ m_data->get_IsUserInitiated (&isUserInitiated);
        @ return isUserInitiated;
    }

    方法 权限类型 <公开 属性读 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_PERMISSION_KIND permissionKind;
        @ m_data->get_PermissionKind (&permissionKind);
        @ return permissionKind;
    }

    方法 状态 <公开 属性读 类型 = 整数 注释 = "0 表示 DEFAULT | 默认；" 注释 = "1 表示 ALLOW | 许可；" 注释 = "2 表示 DENY | 拒绝" 折叠 折叠2
            @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_PERMISSION_STATE permissionKind;
        @ m_data->get_State (&permissionKind);
        @ return permissionKind;
    }

    方法 状态 <公开 属性写 折叠 @禁止流程检查 = 真>
    参数 状态 <类型 = 整数>
    {
        @ m_data->get_State ((COREWEBVIEW2_PERMISSION_STATE)@<状态>);
    }

    方法 URL <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string uri;
        @ m_data->get_Uri (&uri);
        @ return uri.get ();
    }

    方法 处理 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL handled = FALSE;
        @ ((ICoreWebView2PermissionRequestedEventArgs2*)m_data.get ())->get_Handled (&handled);
        @ return handled;
    }

    方法 处理 <公开 属性写 折叠>
    参数 处理 <类型 = 逻辑型>
    {
        @ ((ICoreWebView2PermissionRequestedEventArgs2*)m_data.get ())->put_Handled (@<处理>);
    }
}

类 事件参数_请求权限2 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2PermissionRequestedEventArgs2> m_data;
    # inline_ @sn<current_class> (ICoreWebView2PermissionRequestedEventArgs2* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 处理 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL handled = FALSE;
        @ m_data->get_Handled (&handled);
        @ return handled;
    }

    方法 处理 <公开 属性写 折叠>
    参数 处理 <类型 = 逻辑型>
    {
        @ m_data->put_Handled (@<处理>);
    }
}

类 事件参数_JS对话框即将打开 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2ScriptDialogOpeningEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2ScriptDialogOpeningEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 接收 <公开 折叠>
    {
        @ m_data->Accept ();
    }

    方法 默认文本 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string defaultText;
        @ m_data->get_DefaultText (&defaultText);
        @ return defaultText.get ();
    }

    方法 类型 <公开 属性读 类型 = 整数 注释 = "0 表示 ALERT；" 注释 = "1 表示 CONFIRM；" 注释 = "2 表示 PROMPT；"
            注释 = "3 表示 BEFOREUNLOAD" 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_SCRIPT_DIALOG_KIND kind;
        @ m_data->get_Kind (&kind);
        @ return kind;
    }

    方法 消息 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string message;
        @ m_data->get_Message (&message);
        @ return message.get ();
    }

    方法 结果文本 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string resultText;
        @ m_data->get_ResultText (&resultText);
        @ return resultText.get ();
    }

    方法 Url <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string uri;
        @ m_data->get_Uri (&uri);
        @ return uri.get ();
    }

    方法 结果文本 <公开 属性写 折叠 @禁止流程检查 = 真>
    参数 结果文本 <类型 = 文本型>
    {
        @ m_data->put_ResultText (@<结果文本>.GetText ());
    }
}

类 事件参数_收到Web消息 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2WebMessageReceivedEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2WebMessageReceivedEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 Url <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string source;
        @ m_data->get_Source (&source);
        @ return source.get ();
    }

    方法 Web消息 <公开 属性读 类型 = 文本型 注释 = "JSON格式消息" 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string webMessageAsJson;
        @ m_data->get_WebMessageAsJson (&webMessageAsJson);
        @ return webMessageAsJson.get ();
    }

    方法 尝试获取Web消息 <公开 类型 = 文本型 注释 = "字符串消息" 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string webMessageAsString;
        @ m_data->TryGetWebMessageAsString (&webMessageAsString);
        @ return webMessageAsString.get ();
    }
}

类 事件参数_请求Web资源 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2WebResourceRequestedEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2WebResourceRequestedEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 取Web资源请求 <公开 折叠>
    参数 WebView2Web资源请求 <类型 = WebView2Web资源请求类 注释 = "输出参数">
    {
        @ m_data->get_Request (&@<WebView2Web资源请求>.m_data);
    }

    方法 资源上下文 <公开 属性读 类型 = 整数 注释 = "0 表示 ALL | 全部；" 注释 = "1 表示 DOCUMENT | 文档；" 注释 = "2 表示 STYLESHEET | CSS；"
            注释 = "3 表示 IMAGE | 图像；" 注释 = "4 表示 MEDIA | 媒体；" 注释 = "5 表示 FONT | 字体；" 注释 = "6 表示 SCRIPT | JS；"
            注释 = "..." 折叠 折叠2 @禁止流程检查 = 真>
    {
        @ COREWEBVIEW2_WEB_RESOURCE_CONTEXT context;
        @ m_data->get_ResourceContext (&context);
        @ return context;
    }

    方法 取Web资源响应 <公开 折叠>
    参数 WebView2Web资源响应 <类型 = WebView2Web资源响应类 注释 = "输出参数">
    {
        @ m_data->get_Response (&@<WebView2Web资源响应>.m_data);
    }

    方法 置响应 <公开 折叠>
    参数 WebView2Web资源响应 <类型 = WebView2Web资源响应类>
    {
        @ m_data->put_Response (@<WebView2Web资源响应>.m_data.get ());
    }
}

类 事件参数_收到Web资源响应 <公开 折叠>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2WebResourceResponseReceivedEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2WebResourceResponseReceivedEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 取Web资源请求 <公开 折叠>
    参数 WebView2Web资源请求 <类型 = WebView2Web资源请求类 注释 = "输出参数">
    {
        @ m_data->get_Request(&@<WebView2Web资源请求>.m_data);
    }

    方法 取Web资源响应 <公开 折叠>
    参数 WebView2Web资源响应视图 <类型 = WebView2Web资源响应视图类 注释 = "输出参数">
    {
        @ m_data->get_Response(&@<WebView2Web资源响应视图>.m_data);
    }
}

类 事件参数_下载即将开始 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2DownloadStartingEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2DownloadStartingEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 取消 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL cancel = FALSE;
        @ m_data->get_Cancel (&cancel);
        @ return cancel;
    }

    方法 取消 <公开 属性写 折叠>
    参数 取消 <类型 = 逻辑型>
    {
        @ m_data->put_Cancel (@<取消>);
    }

    方法 取下载操作 <公开 折叠 @禁止流程检查 = 真>
    参数 WebView2下载操作 <类型 = WebView2下载操作类 注释 = "输出参数">
    {
        @ m_data->get_DownloadOperation(&@<WebView2下载操作>.m_data);
        @ @<WebView2下载操作>.BindEvent ();
    }

    方法 处理 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL handled = FALSE;
        @ m_data->get_Handled (&handled);
        @ return handled;
    }

    方法 处理 <公开 属性写 折叠>
    参数 处理 <类型 = 逻辑型>
    {
        @ m_data->put_Handled (@<处理>);
    }

    方法 结果文件路径 <公开 属性读 类型 = 文本型 折叠 @禁止流程检查 = 真>
    {
        @ wil::unique_cotaskmem_string resultFilePath;
        @ m_data->get_ResultFilePath (&resultFilePath);
        @ return resultFilePath.get ();
    }

    方法 结果文件路径 <公开 属性写 折叠>
    参数 文件路径 <类型 = 文本型>
    {
        @ m_data->put_ResultFilePath (@<文件路径>.GetText ());
    }
}

类 事件参数_请求菜单 <公开 折叠 @禁止创建对象 = 真>
{

    # @begin
    # <> <include>
    # wil::com_ptr<ICoreWebView2ContextMenuRequestedEventArgs> m_data;
    # inline_ @sn<current_class> (ICoreWebView2ContextMenuRequestedEventArgs* data) : @sn<current_class> () {
    #     m_data = data;
    # }
    # inline_ void @an<_CopySelfFromExtra> (const @sn<current_class>& objCopyFrom) {
    #     m_data = objCopyFrom.m_data;
    # }
    # <> </include>
    # @end

    方法 取菜单目标 <公开 折叠 @禁止流程检查 = 真>
    参数 WebView2菜单目标 <类型 = WebView2菜单目标类 注释 = "输出参数">
    {
        @ m_data->get_ContextMenuTarget (&@<WebView2菜单目标>.m_data);
    }

    方法 处理 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        @ BOOL value = FALSE;
        @ m_data->get_Handled (&value);
        @ return value;
    }

    方法 处理 <公开 属性写 折叠>
    参数 处理 <类型 = 逻辑型>
    {
        @ m_data->put_Handled (@<处理>);
    }

    方法 位置 <公开 类型 = 位置类 折叠>
    {
        变量 位置 <类型 = 位置类>
        @ POINT value;
        @ m_data->get_Location (&value);
        @ @<位置.横向位置> = value.x;
        @ @<位置.纵向位置> = value.y;
        返回 (位置)
    }

    方法 取菜单项数组 <公开 折叠 @禁止流程检查 = 真>
    参数 WebView2菜单项数组 <类型 = WebView2菜单项数组类 注释 = "输出参数">
    {
        @ m_data->get_MenuItems (&@<WebView2菜单项数组>.m_data);
    }

    方法 被选择的命令ID <公开 属性读 类型 = 整数 折叠 @禁止流程检查 = 真>
    {
        @ INT32 value = 0;
        @ m_data->get_SelectedCommandId (&value);
        @ return value;
    }

    方法 被选择的命令ID <公开 属性写 折叠>
    参数 命令ID <类型 = 整数>
    {
        @ m_data->put_SelectedCommandId ((INT32)@<命令ID>);
    }
}

类 WebView2辅助函数 <折叠>
{
    方法 取JS元素 <公开 静态 类型 = 文本型 折叠>
    参数 元素选择器 <类型 = 文本型>
    参数 元素索引 <类型 = 整数 @默认值 = 0>
    {
        返回 ("document.querySelectorAll(\"" + 元素选择器 + "\")[" + 到文本 (元素索引) + "]")
    }

    方法 取窗口句柄Ex <公开 静态 类型 = 变整数 折叠 @禁止流程检查 = 真>
    参数 父窗口句柄 <类型 = 变整数>
    参数 窗口类名 <类型 = 文本型 @默认值 = 空对象>
    参数 窗口标题 <类型 = 文本型 @默认值 = 空对象>
    {
        @ return (INT_P)FindWindowExW (
        @     (HWND)@<父窗口句柄>,
        @     nullptr,
        @     @<窗口类名>.IsNullObject () ? nullptr : @<窗口类名>.GetText (),
        @     @<窗口标题>.IsNullObject () ? nullptr : @<窗口标题>.GetText ());
    }

    #
}

#
