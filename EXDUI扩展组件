<火山程序 类型 = "通常" 版本 = 1 />

类 扩展_组开关按钮 <公开 基础类 = 通用属性 注释 = "可以复制本类进行修改" 注释 = "" 折叠 折叠2 @视窗.后缀文本 = "public IEXDUIEventListener"
        @视窗.窗口组件 = "icon=\"res\\extend.bmp\"\r\ndefault_size = \"20, 20\"\r\npreview_unsupported = true\r\ncategory = \"EXDUI_扩展组件\"">
{
    变量 是否使用图标 <公开 类型 = 逻辑型 值 = 真 注释 = "默认真" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 图标宽度 <类型 = 单精度小数 值 = 24 编辑时信息 = "0, DEA9C, 0, 0">
    变量 图标_句柄 <类型 = 整数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 "" <编辑时信息 = "0, DEA9C, 0, 0">
    变量 是否使用开关 <公开 类型 = 逻辑型 值 = 假 注释 = "默认关闭" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 开关_宽度 <公开 类型 = 单精度小数 值 = 42 注释 = "默认42" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 开关_高度 <公开 类型 = 单精度小数 值 = 19 注释 = "默认19" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 开关_和文本间距 <类型 = 单精度小数 值 = 10 编辑时信息 = "0, DEA9C, 0, 0">
    变量 开关_是否显示文本 <公开 类型 = 逻辑型 值 = 真 注释 = "默认真" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 开关_开文本 <公开 类型 = 文本型 值 = "开" 注释 = "默认\"开\"" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 开关_关文本 <公开 类型 = 文本型 值 = "关" 注释 = "默认\"关\"" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 开关_是否选中 <公开 类型 = 逻辑型 编辑时信息 = "0, DEA9C, 0, 0">
    变量 "" <编辑时信息 = "0, DEA9C, 0, 0">
    变量 是否使用组合框 <公开 类型 = 逻辑型 值 = 假 注释 = "默认关闭" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 组合框_宽度 <公开 类型 = 单精度小数 值 = 100 注释 = "默认100" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 组合框_高度 <公开 类型 = 单精度小数 值 = 24 注释 = "默认22" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 组合框_表项高度 <公开 类型 = 单精度小数 值 = 26>
    变量 组合框_文本 <公开 类型 = 文本型 值 = "按钮" 注释 = "默认\"按钮\"" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 组合框_自动计算宽度 <公开 类型 = 逻辑型 值 = 真 注释 = "将根据项目文本计算弹出宽度" @属性变量 = 真>
    变量 组合框_背景颜色 <公开 类型 = 整数 值 = 2367776 注释 = "默认0" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 组合框项目 <类型 = 文本数组类>
    变量 ""
    变量 "//组合框_文本" <公开 类型 = 文本型 编辑时信息 = "0, DEA9C, 0, 0">
    变量 "//默认项目选中项" <类型 = 整数>
    变量 ""
    变量 小箭头 <类型 = 文本型 值 = "⌵" 编辑时信息 = "0, DEA9C, 0, 0">
    变量 "" <编辑时信息 = "0, DEA9C, 0, 0">
    变量 是否使用滑动条 <公开 类型 = 逻辑型 值 = 假 注释 = "默认关闭" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 滑动条_最小位置 <公开 类型 = 整数 值 = 1 注释 = "默认1" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 滑动条_最大位置 <公开 类型 = 整数 值 = 100 注释 = "默认100" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 滑动条_位置 <公开 类型 = 整数 值 = 30 注释 = "默认20" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 滑动条_宽度 <公开 类型 = 单精度小数 值 = 100 注释 = "默认100" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 滑动条_附加文本 <公开 类型 = 文本型 注释 = "比如 100 秒" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 滑动条_是否使用彩色 <公开 类型 = 逻辑型 值 = 假 注释 = "默认为假" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 滑动条滑动位置 <类型 = 单精度小数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 "" <编辑时信息 = "0, DEA9C, 0, 0">
    变量 是否使用快捷键 <公开 类型 = 逻辑型 值 = 假 注释 = "默认关闭" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 快捷键_高度 <公开 类型 = 单精度小数 值 = 24 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 快捷键_文字背景与边框间距 <公开 类型 = 单精度小数 值 = 4 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 快捷键图标_句柄 <类型 = 整数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 快捷键图标宽度 <类型 = 单精度小数 值 = 12 编辑时信息 = "0, DEA9C, 0, 0">
    变量 快捷键_信息 <公开 类型 = 快捷键信息 编辑时信息 = "0, DEA9C, 0, 0">
    变量 "" <编辑时信息 = "0, DEA9C, 0, 0">
    变量 按键1宽度 <类型 = 单精度小数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 按键2宽度 <类型 = 单精度小数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 按键3宽度 <类型 = 单精度小数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 按键4宽度 <类型 = 单精度小数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 "" <编辑时信息 = "0, DEA9C, 0, 0">
    变量 缩放值 <类型 = 单精度小数 编辑时信息 = "0, DEA9C, 0, 0" "">
    变量 边距 <公开 类型 = 单精度小数 值 = 20 注释 = "默认20" 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 主文本 <公开 类型 = 文本型 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 副文本 <公开 类型 = 文本型 编辑时信息 = "0, DEA9C, 0, 0" @属性变量 = 真>
    变量 "" <编辑时信息 = "0, DEA9C, 0, 0">
    变量 "" <编辑时信息 = "0, DEA9C, 0, 0">
    变量 开关路径 <类型 = 整数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 组合框路径 <类型 = 整数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 滑动条路径 <类型 = 整数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 快捷键路径 <类型 = 整数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 "" <编辑时信息 = "0, DEA9C, 0, 0">
    变量 成员状态_对象 <类型 = 整数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 内_开关文本宽度 <类型 = 单精度小数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 内_组合框_文本宽度 <类型 = 单精度小数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 内_滑动条文本宽度 <类型 = 单精度小数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 内_快捷键文本宽度 <类型 = 单精度小数 编辑时信息 = "0, DEA9C, 0, 0">
    变量 初始化背景颜色 <类型 = 逻辑型 编辑时信息 = "0, DEA9C, 0, 0">
    变量 "" <编辑时信息 = "0, DEA9C, 0, 0">
    变量 遮罩画板 <类型 = 画板 编辑时信息 = "0, DEA9C, 0, 0">
    变量 模板列表框1 <类型 = 模板列表框 编辑时信息 = "0, DEA9C, 0, 0">
    变量 报表列表框1 <类型 = 报表列表框>
    变量 模板列表框子组件句柄 <类型 = 整数数组类>
    变量 窗口引擎 <类型 = 整数>
    变量 局_加粗字体 <类型 = 整数>

    # 基本风格,扩展风格,文本风格可以自定义修改
    # 不同的自定义组件必须修改组件类名(必须是常量文本)!!!
    # 回调函数是绘制组件的关键,函数名称可以修改
    # 最后3个参数分别是  组件额外分配字节数,组件默认鼠标指针句柄,画布标志 #ECVF_
    # @ @m<DECLARE_EXDUI_CONTROL_DEFAULT_EX_NAME> (0, 0, 0, EOS_VISIBLE, EOS_EX_FOCUSABLE | EOS_EX_TABSTOP, DT_VCENTER | DT_CENTER, L"扩展_组开关按钮", @<组件回调>, 0, 0, 0) 

    方法 清空组合框 <公开 折叠 "">
    {
        组合框项目.删除所有成员 ()
    }

    方法 加入项目 <公开 折叠 "">
    参数 文本 <类型 = 文本型 "">
    {
        组合框项目.加入成员 (文本)
    }

    方法 组件回调 <公开 类型 = 变整数 折叠>
    参数 hWnd <类型 = HWND 注释 = "HWND">
    参数 hObj <类型 = 整数 注释 = "HEXOBJ">
    参数 pObj <类型 = 组件数据结构指针 注释 = "obj_s *">
    参数 uMsg <类型 = 整数 注释 = "INT">
    参数 wParam <类型 = 变整数 注释 = "WPARAM">
    参数 lParam <类型 = 变整数 注释 = "LPARAM">
    {
        如果 (uMsg == WM_CREATE)  // 组件创建完毕
        {
            缩放值 = Ex_Scale (100) / 100
            边距 = 边距 * 缩放值
            图标宽度 = 图标宽度 * 缩放值

            <折叠> 如果真 (是否使用开关)
            {
                路径_创建 (0, 开关路径)
                开关_宽度 = 开关_宽度 * 缩放值
                开关_高度 = 开关_高度 * 缩放值
                // 开关_和文本间距 = 开关_和文本间距 * 缩放值
                变量 局_宽度 <类型 = 单精度小数>
                变量 局_高度 <类型 = 单精度小数>
                画布_计算文本尺寸 ((整数)组件取数值 (hObj, 组件数值.画布句柄), (整数)组件取数值 (hObj, 组件数值.字体句柄), 开关_开文本, , 文本对齐方式.单行水平垂直居中, 500, 500, 局_宽度, 局_高度)
                内_开关文本宽度 = 局_宽度
                画布_计算文本尺寸 ((整数)组件取数值 (hObj, 组件数值.画布句柄), (整数)组件取数值 (hObj, 组件数值.字体句柄), 开关_关文本, , 文本对齐方式.单行水平垂直居中, 500, 500, 局_宽度, 局_高度)
                如果 (内_开关文本宽度 < 局_宽度)
                {
                    内_开关文本宽度 = 局_宽度
                }

            }
            <折叠> 如果真 (是否使用组合框)
            {
                组合框_宽度 = 组合框_宽度 * 缩放值
                组合框_高度 = 组合框_高度 * 缩放值
                组合框_表项高度 = 组合框_表项高度 * 缩放值
                路径_创建 (0, 组合框路径)

            }
            <折叠> 如果真 (是否使用滑动条)
            {
                滑动条_宽度 = 滑动条_宽度 * 缩放值
                路径_创建 (0, 滑动条路径)
            }
            <折叠> 如果真 (是否使用快捷键)
            {
                快捷键_高度 = 快捷键_高度 * 缩放值
                路径_创建 (0, 快捷键路径)
                局_加粗字体 = 字体_创建自名称 ("微软雅黑", 12, 1)
            }

        }
        <折叠> 否则 (uMsg == WM_DESTROY)  // 组件销毁
        {
            如果真 (图标_句柄 != 0)
            {
                图片_销毁 (图标_句柄)
            }
            如果真 (快捷键图标_句柄 != 0)
            {
                图片_销毁 (快捷键图标_句柄)
            }
            如果真 (局_加粗字体 != 0)
            {
                字体_销毁 (局_加粗字体)
            }


        }
        <折叠> 否则 (uMsg == WM_SIZE)  // 组件大小改变
        {
            路径更新 (pObj)
        }
        <折叠> 否则 (uMsg == WM_MOUSEMOVE)  // 鼠标移动
        {
            如果真 (是否使用开关)
            {
                如果 (是否命中 (开关路径, lParam))
                {
                    如果真 (取状态 (组件状态.开关进入) == 假)
                    {
                        置状态 (组件状态.开关进入, 真)
                        重画路径区域 (hObj, 开关路径)
                    }

                }
                否则
                {
                    如果真 (取状态 (组件状态.开关进入))
                    {
                        置状态 (组件状态.开关进入, 假)
                        重画路径区域 (hObj, 开关路径)
                    }

                }

            }
            <折叠> 如果真 (是否使用组合框 == 真)
            {
                如果真 (是否使用开关 == 真 && 开关_是否选中 == 真 || 是否使用开关 == 假)
                {
                    如果 (是否命中 (组合框路径, lParam))
                    {
                        如果真 (取状态 (组件状态.按钮进入) == 假)
                        {
                            置状态 (组件状态.按钮进入, 真)
                            重画路径区域 (hObj, 组合框路径)
                        }
                    }
                    否则
                    {
                        如果真 (取状态 (组件状态.按钮进入))
                        {
                            置状态 (组件状态.按钮进入, 假)
                            重画路径区域 (hObj, 组合框路径)
                        }
                    }

                }


            }
            <折叠> 如果真 (是否使用滑动条 == 真)
            {
                如果真 (是否使用开关 == 真 && 开关_是否选中 == 真 || 是否使用开关 == 假)
                {
                    <折叠> 如果 (是否命中 (滑动条路径, lParam))
                    {
                        置状态 (组件状态.滑动条进入, 真)
                        如果真 (取状态 (组件状态.滑动条按下))
                        {
                            变量 RE <类型 = RECTF>
                            变量 局_左边 <类型 = 单精度小数>
                            路径_取边界矩形 (滑动条路径, RE.取指针 ())
                            局_左边 = 取低位 (lParam)
                            局_左边 = 局_左边 - RE.left - 内_滑动条文本宽度
                            如果真 (局_左边 < 滑动条_最小位置)
                            {
                                局_左边 = 滑动条_最小位置
                            }
                            如果真 (局_左边 > 滑动条_宽度)
                            {
                                局_左边 = 滑动条_宽度 + 1
                            }
                            滑动条滑动位置 = 局_左边
                            局_左边 = 局_左边 * (滑动条_最大位置 - 滑动条_最小位置) / 滑动条_宽度
                            滑动条_位置 = (整数)四舍五入 (局_左边, 0)
                            滑动条位置改变 (滑动条_位置)
                            重画路径区域 (hObj, 滑动条路径)
                        }

                        重画路径区域 (hObj, 滑动条路径)
                    }
                    否则
                    {
                        如果真 (取状态 (组件状态.滑动条进入))
                        {
                            置状态 (组件状态.滑动条进入, 假)
                            重画路径区域 (hObj, 滑动条路径)
                        }

                    }

                }

            }
            <折叠> 如果真 (是否使用快捷键 == 真)
            {
                如果真 (是否使用开关 == 真 && 开关_是否选中 == 真 || 是否使用开关 == 假)
                {
                    如果 (是否命中 (快捷键路径, lParam))
                    {
                        如果真 (取状态 (组件状态.快捷键进入) == 假)
                        {
                            置状态 (组件状态.快捷键进入, 真)
                            重画路径区域 (hObj, 快捷键路径)
                        }
                    }
                    否则
                    {
                        如果真 (取状态 (组件状态.快捷键进入))
                        {
                            置状态 (组件状态.快捷键进入, 假)
                            重画路径区域 (hObj, 快捷键路径)
                        }
                    }

                }
            }

            如果真 (组件取颜色 (hObj, 颜色标识.背景颜色) != ExRGB2ARGB (颜色类.白色, 15))
            {
                组件置颜色 (hObj, 颜色标识.背景颜色, ExRGB2ARGB (颜色类.白色, 15), 真)
            }

        }
        <折叠> 否则 (uMsg == WM_MOUSELEAVE)  // 鼠标离开
        {
            // 调试输出 ("离开组件")
            // 调试输出 ()

            如果真 (是否命中 (组合框路径, lParam) == 假 || 组合框路径 == 0)
            {
                组件置颜色 (hObj, 颜色标识.背景颜色, ExRGB2ARGB (颜色类.白色, 10), 真)

            }
        }
        <折叠> 否则 (uMsg == WM_LBUTTONDOWN)  // 左键按下
        {
            <折叠> 如果真 (是否使用开关 && 取状态 (组件状态.开关进入) == 真)
            {
                如果真 (取状态 (组件状态.开关按下) == 假)
                {
                    置状态 (组件状态.开关按下, 真)
                    重画路径区域 (hObj, 开关路径)

                }

            }
            如果真 (是否使用组合框 && 取状态 (组件状态.按钮进入) == 真)
            {
                如果真 (取状态 (组件状态.按钮按下) == 假)
                {
                    置状态 (组件状态.按钮按下, 真)
                    重画路径区域 (hObj, 组合框路径)
                }

            }
            <折叠> 如果真 (是否使用滑动条 && 取状态 (组件状态.滑动条进入) == 真)
            {
                变量 RE <类型 = RECTF>
                变量 局_左边 <类型 = 单精度小数>
                置状态 (组件状态.滑动条按下, 真)
                路径_取边界矩形 (滑动条路径, RE.取指针 ())
                局_左边 = 取低位 (lParam)
                局_左边 = 局_左边 - RE.left - 内_滑动条文本宽度
                如果真 (局_左边 >= 滑动条_最小位置 && 局_左边 <= 滑动条_宽度)
                {
                    滑动条滑动位置 = 局_左边
                    局_左边 = 局_左边 * (滑动条_最大位置 - 滑动条_最小位置) / 滑动条_宽度 + 滑动条_最小位置
                    滑动条_位置 = (整数)四舍五入 (局_左边, 0)
                    重画路径区域 (hObj, 滑动条路径)
                }

            }
            <折叠> 如果真 (是否使用快捷键 && 取状态 (组件状态.快捷键进入) == 真)
            {
                如果真 (取状态 (组件状态.快捷键按下) == 假)
                {
                    置状态 (组件状态.快捷键按下, 真)
                    重画路径区域 (hObj, 快捷键路径)
                }

            }

        }
        否则 (uMsg == WM_LBUTTONUP)  // 左键放开
        {
            <折叠> 如果真 (是否使用开关 && 取状态 (组件状态.开关按下) == 真)
            {
                如果真 (取状态 (组件状态.开关进入))
                {
                    变量 局_选中 <类型 = 逻辑型>
                    局_选中 = 取反 (开关_是否选中)
                    如果真 (开关状态改变 (局_选中) == 0)
                    {
                        开关_是否选中 = 局_选中
                    }
                }
                置状态 (组件状态.开关按下, 假)
                重画路径区域 (hObj, 开关路径)

            }
            如果真 (是否使用组合框 && 取状态 (组件状态.按钮按下) == 真)
            {
                置状态 (组件状态.按钮按下, 假)
                如果真 (取状态 (组件状态.按钮进入))
                {
                    如果 (组合框即将弹出 () == 0)
                    {
                        弹出组合框 (pObj)
                    }
                }

                重画路径区域 (hObj, 组合框路径)

            }
            <折叠> 如果真 (是否使用滑动条 && 取状态 (组件状态.滑动条按下) == 真)
            {
                如果真 (取状态 (组件状态.滑动条进入))
                {
                    滑动条位置改变_鼠标放开 (滑动条_位置)
                }
                置状态 (组件状态.滑动条按下, 假)
                重画路径区域 (hObj, 滑动条路径)

            }
            <折叠> 如果真 (是否使用快捷键 && 取状态 (组件状态.快捷键进入) == 真)
            {
                如果真 (取状态 (组件状态.快捷键进入))
                {
                    快捷键左键单击 ()
                }
                置状态 (组件状态.快捷键按下, 假)
                重画路径区域 (hObj, 快捷键路径)

            }

        }
        <折叠> 否则 (uMsg == WM_PAINT)  // 组件绘制过程
        {
            如果真 (初始化背景颜色 == 假)
            {
                初始化背景颜色 = 真
                组件置颜色 (hObj, 颜色标识.背景颜色, ExRGB2ARGB (颜色类.白色, 10), 假)
            }
            变量 ps <类型 = 绘制结构2 注释 = "固定写法">
            如果 (组件开始绘制 (hObj, pObj, ps))  // 固定写法
            {
                变量 画刷 <类型 = 变整数>
                变量 RE <类型 = RECTF>
                变量 局_文本颜色 <类型 = 整数>
                画刷 = 画刷_创建 (0)

                如果 (是否使用图标 == 假)
                {
                    画布_画文本 (ps.画布句柄, pObj.hFont_, 组件取颜色 (hObj, 颜色标识.文本颜色_正常), 主文本, , , 边距, 0, 1000, ps.高度)
                }
                否则
                {
                    画布_画图片矩形 (ps.画布句柄, 图标_句柄, 边距, (ps.高度 - 图标宽度) / 2, 边距 + 图标宽度, (ps.高度 - 图标宽度) / 2 + 图标宽度, ExRGB2ARGB (颜色类.黑色, ))
                    画布_画文本 (ps.画布句柄, pObj.hFont_, 组件取颜色 (hObj, 颜色标识.文本颜色_正常), 主文本, , , 边距 + 边距 + 图标宽度, 0, 1000, ps.高度)
                }

                如果真 (副文本 != "")
                {
                    画布_画文本 (ps.画布句柄, pObj.hFont_, 组件取颜色 (hObj, 颜色标识.文本颜色_悬浮), 副文本, , , ps.宽度 / 2 - 50 * 缩放值, 0, ps.宽度 / 2 + 200 * 缩放值, ps.高度)
                }

                <折叠> 如果真 (是否使用开关)
                {
                    路径_取边界矩形 (开关路径, RE.取指针 ())
                    如果 (开关_是否选中)
                    {
                        画刷_置颜色 (画刷, -380845313)
                        画布_填充路径 (ps.画布句柄, 开关路径, 画刷)  // 画开关背景
                        画刷_置颜色 (画刷, ExRGB2ARGB (颜色类.黑色, 255))  // 圆圈颜色_选中

                        如果 (取状态 (组件状态.开关进入))
                        {
                            如果 (取状态 (组件状态.开关按下))
                            {
                                画布_填充椭圆 (ps.画布句柄, 画刷, RE.right - 开关_高度 / 2 - 计算缩放值 (1), (RE.top + RE.bottom) / 2 - 计算缩放值 (0.5), 开关_高度 / 2 - 计算缩放值 (1), 开关_高度 / 2 - 计算缩放值 (2))
                            }
                            否则
                            {
                                画布_填充椭圆 (ps.画布句柄, 画刷, RE.right - 开关_高度 / 2, (RE.top + RE.bottom) / 2 - 计算缩放值 (0.5), 开关_高度 / 2 - 计算缩放值 (2), 开关_高度 / 2 - 计算缩放值 (2))
                            }

                        }
                        否则
                        {
                            画布_填充椭圆 (ps.画布句柄, 画刷, RE.right - 开关_高度 / 2, (RE.top + RE.bottom) / 2 - 计算缩放值 (0.5), 开关_高度 / 2 - 计算缩放值 (3), 开关_高度 / 2 - 计算缩放值 (3))
                        }
                        如果真 (开关_是否显示文本)
                        {
                            画布_画文本 (ps.画布句柄, pObj.hFont_, 组件取颜色 (hObj, 颜色标识.文本颜色_按下), 开关_开文本, , 文本对齐方式.左边垂直居中, RE.left - 内_开关文本宽度 - 开关_和文本间距, RE.top, RE.left, RE.bottom)
                        }

                    }
                    <折叠> 否则
                    {
                        画刷_置颜色 (画刷, ExRGB2ARGB (颜色类.白色, 255))  // 圆圈颜色和背景边框
                        画布_画路径 (ps.画布句柄, 开关路径, 画刷, 1, 0)  // 画开关背景

                        如果 (取状态 (组件状态.开关进入))
                        {
                            如果 (取状态 (组件状态.开关按下))
                            {
                                画布_填充椭圆 (ps.画布句柄, 画刷, RE.left + 开关_高度 / 2 + 计算缩放值 (1), (RE.top + RE.bottom) / 2 - 计算缩放值 (0.5), 开关_高度 / 2 - 计算缩放值 (1), 开关_高度 / 2 - 计算缩放值 (2))
                            }
                            否则
                            {
                                画布_填充椭圆 (ps.画布句柄, 画刷, RE.left + 开关_高度 / 2, (RE.top + RE.bottom) / 2 - 计算缩放值 (0.5), 开关_高度 / 2 - 计算缩放值 (2), 开关_高度 / 2 - 计算缩放值 (2))
                            }

                        }
                        否则
                        {
                            画布_填充椭圆 (ps.画布句柄, 画刷, RE.left + 开关_高度 / 2, (RE.top + RE.bottom) / 2 - 计算缩放值 (0.5), 开关_高度 / 2 - 计算缩放值 (3), 开关_高度 / 2 - 计算缩放值 (3))
                        }

                        如果真 (开关_是否显示文本)
                        {
                            画布_画文本 (ps.画布句柄, pObj.hFont_, 组件取颜色 (hObj, 颜色标识.文本颜色_按下), 开关_关文本, , 文本对齐方式.左边垂直居中, RE.left - 内_开关文本宽度 - 开关_和文本间距, RE.top, RE.left, RE.bottom)

                        }

                    }



                }
                <折叠> 如果真 (是否使用组合框)
                {
                    路径_取边界矩形 (组合框路径, RE.取指针 ())
                    如果 (是否使用开关 == 真 && 开关_是否选中 == 真 || 是否使用开关 == 假)
                    {
                        如果 (取状态 (组件状态.按钮进入))
                        {
                            画刷_置颜色 (画刷, ExRGB2ARGB (颜色类.白色, 20))
                        }
                        否则
                        {
                            画刷_置颜色 (画刷, ExRGB2ARGB (颜色类.白色, 10))
                        }
                        画布_填充路径 (ps.画布句柄, 组合框路径, 画刷)  // 画按钮背景

                        画刷_置颜色 (画刷, ExRGB2ARGB (颜色类.白色, 100))
                        画布_画路径 (ps.画布句柄, 组合框路径, 画刷, 0.4, 0)  // 画按钮边框
                        局_文本颜色 = 组件取颜色 (hObj, 颜色标识.文本颜色_按下)

                    }
                    否则
                    {
                        画刷_置颜色 (画刷, ExRGB2ARGB (颜色类.白色, 50))
                        画布_画路径 (ps.画布句柄, 组合框路径, 画刷, 0.4, 0)  // 画按钮边框
                        局_文本颜色 = ExRGB2ARGB (颜色类.白色, 100)

                    }


                    画布_画文本 (ps.画布句柄, pObj.hFont_, 局_文本颜色, 组合框_文本, , 文本对齐方式.左边垂直居中, RE.left + 计算缩放值 (10), RE.top, RE.right, RE.bottom)
                    如果 (取状态 (组件状态.按钮按下))
                    {
                        画布_画文本 (ps.画布句柄, pObj.hFont_, 局_文本颜色, 小箭头, , 文本对齐方式.右边垂直居中, RE.left, RE.top, RE.right - 计算缩放值 (10), RE.bottom)
                    }
                    否则
                    {
                        画布_画文本 (ps.画布句柄, pObj.hFont_, 局_文本颜色, 小箭头, , 文本对齐方式.右边垂直居中, RE.left, RE.top, RE.right - 计算缩放值 (10), RE.bottom - 计算缩放值 (4))
                    }

                }
                <折叠> 如果真 (是否使用滑动条)
                {
                    路径_取边界矩形 (滑动条路径, RE.取指针 ())
                    如果真 (滑动条滑动位置 == 0)
                    {
                        滑动条滑动位置 = (滑动条_位置 - 滑动条_最小位置) * 滑动条_宽度 / (滑动条_最大位置 - 滑动条_最小位置)
                    }
                    如果 (是否使用开关 == 真 && 开关_是否选中 == 真 || 是否使用开关 == 假)
                    {
                        <折叠> 如果 (滑动条_是否使用彩色)
                        {
                            变量 渐变画刷 <类型 = 变整数>
                            变量 渐变画刷信息 <类型 = "渐变画刷点信息 [5]">
                            渐变画刷信息 [0].位置 = 0.1
                            渐变画刷信息 [1].位置 = 0.3
                            渐变画刷信息 [2].位置 = 0.5
                            渐变画刷信息 [3].位置 = 0.7
                            渐变画刷信息 [4].位置 = 0.9
                            渐变画刷信息 [0].ARGB = ExRGB2ARGB (颜色类.橙黄色, 255)
                            渐变画刷信息 [1].ARGB = ExRGB2ARGB (颜色类.天蓝色, 255)
                            渐变画刷信息 [2].ARGB = ExRGB2ARGB (颜色类.红色, 255)
                            渐变画刷信息 [3].ARGB = ExRGB2ARGB (颜色类.绿色, 255)
                            渐变画刷信息 [4].ARGB = ExRGB2ARGB (颜色类.黄色, 255)
                            渐变画刷 = 画刷_创建线性渐变画刷2 (RE.left + 内_滑动条文本宽度, ps.高度 / 2, RE.left + 内_滑动条文本宽度 + 滑动条_宽度, ps.高度 / 2, 渐变画刷信息, 5)
                            画布_填充矩形 (ps.画布句柄, 渐变画刷, RE.left + 内_滑动条文本宽度, ps.高度 / 2, RE.left + 内_滑动条文本宽度 + 滑动条滑动位置, ps.高度 / 2)  // 滑动条背景2
                            画刷_销毁 (渐变画刷)

                        }
                        否则
                        {
                            画刷_置颜色 (画刷, -380845313)
                            画布_填充矩形 (ps.画布句柄, 画刷, RE.left + 内_滑动条文本宽度, ps.高度 / 2, RE.left + 内_滑动条文本宽度 + 滑动条滑动位置, ps.高度 / 2)  // 滑动条背景2
                        }

                        画刷_置颜色 (画刷, ExRGB2ARGB (颜色类.白色, 255))
                        画布_填充矩形 (ps.画布句柄, 画刷, RE.left + 内_滑动条文本宽度 + 滑动条滑动位置, ps.高度 / 2, RE.left + 内_滑动条文本宽度 + 滑动条_宽度, ps.高度 / 2)  // 滑动条背景

                        画刷_置颜色 (画刷, ExRGB2ARGB (颜色类.白色, 255))
                        如果 (取状态 (组件状态.滑动条进入))
                        {
                            画布_填充椭圆 (ps.画布句柄, 画刷, RE.left + 内_滑动条文本宽度 + 滑动条滑动位置, ps.高度 / 2, 计算缩放值 (5), 计算缩放值 (5))
                        }
                        否则
                        {
                            画布_填充椭圆 (ps.画布句柄, 画刷, RE.left + 内_滑动条文本宽度 + 滑动条滑动位置, ps.高度 / 2, 计算缩放值 (4), 计算缩放值 (4))
                        }

                        局_文本颜色 = 组件取颜色 (hObj, 颜色标识.文本颜色_按下)
                    }
                    否则
                    {
                        画刷_置颜色 (画刷, ExRGB2ARGB (颜色类.灰色, 255))
                        画布_填充矩形 (ps.画布句柄, 画刷, RE.left + 内_滑动条文本宽度, ps.高度 / 2, RE.left + 内_滑动条文本宽度 + 滑动条_宽度, ps.高度 / 2)  // 滑动条背景
                        画布_填充椭圆 (ps.画布句柄, 画刷, RE.left + 内_滑动条文本宽度 + 滑动条滑动位置, ps.高度 / 2, 计算缩放值 (4), 计算缩放值 (4))

                        局_文本颜色 = ExRGB2ARGB (颜色类.白色, 100)
                    }

                    画布_画文本 (ps.画布句柄, pObj.hFont_, 局_文本颜色, 到文本 (滑动条_位置) + " " + 滑动条_附加文本, , 文本对齐方式.单行水平垂直居中, RE.left, RE.top, RE.left + 内_滑动条文本宽度, RE.bottom)

                }
                <折叠> 如果真 (是否使用快捷键)
                {
                    路径_取边界矩形 (快捷键路径, RE.取指针 ())
                    变量 边框背景颜色 <类型 = 整数>
                    变量 文字背景颜色 <类型 = 整数>
                    变量 文字颜色 <类型 = 整数>

                    如果 (是否使用开关 == 真 && 开关_是否选中 == 真 || 是否使用开关 == 假)
                    {
                        边框背景颜色 = ExRGB2ARGB (颜色类.白色, 100)
                        文字背景颜色 = ExRGB2ARGB (15578441, 255)
                        文字颜色 = ExRGB2ARGB (颜色类.黑色, 255)
                    }
                    否则
                    {
                        边框背景颜色 = ExRGB2ARGB (颜色类.白色, 50)
                        文字背景颜色 = ExRGB2ARGB (15578441, 100)
                        文字颜色 = ExRGB2ARGB (颜色类.黑色, 100)

                    }

                    如果 (取状态 (组件状态.快捷键进入))
                    {
                        画刷_置颜色 (画刷, ExRGB2ARGB (颜色类.白色, 10))
                        画布_填充路径 (ps.画布句柄, 快捷键路径, 画刷)
                    }
                    画刷_置颜色 (画刷, 边框背景颜色)
                    画布_画路径 (ps.画布句柄, 快捷键路径, 画刷, 0.4, 0)

                    变量 局_间距 <类型 = 单精度小数>
                    变量 局_圆角 <类型 = 单精度小数>

                    局_间距 = 计算缩放值 (快捷键_文字背景与边框间距)
                    局_圆角 = 计算缩放值 (4)
                    // 局_加粗字体 = pObj.hFont_

                    画刷_置颜色 (画刷, 文字背景颜色)

                    如果真 (按键1宽度 != 0)
                    {
                        画布_填充圆角矩形 (ps.画布句柄, 画刷, RE.left + 计算缩放值 (10), RE.top + 局_间距, RE.left + 按键1宽度 + 计算缩放值 (5), RE.bottom - 局_间距, 局_圆角, 局_圆角)
                        画布_画文本 (ps.画布句柄, 局_加粗字体, 文字颜色, 快捷键_信息.按键1, , 文本对齐方式.单行水平垂直居中, RE.left + 计算缩放值 (10), RE.top, RE.left + 按键1宽度 + 计算缩放值 (5), RE.bottom)
                    }
                    如果真 (按键2宽度 != 0)
                    {
                        画布_填充圆角矩形 (ps.画布句柄, 画刷, RE.left + 按键1宽度 + 计算缩放值 (10), RE.top + 局_间距, RE.left + 按键1宽度 + 计算缩放值 (5) + 按键2宽度, RE.bottom - 局_间距, 局_圆角, 局_圆角)
                        画布_画文本 (ps.画布句柄, 局_加粗字体, 文字颜色, 快捷键_信息.按键2, , 文本对齐方式.单行水平垂直居中, RE.left + 按键1宽度 + 计算缩放值 (10), RE.top, RE.left + 按键1宽度 + 计算缩放值 (5) + 按键2宽度, RE.bottom)
                    }
                    如果真 (按键3宽度 != 0)
                    {
                        画布_填充圆角矩形 (ps.画布句柄, 画刷, RE.left + 按键1宽度 + 按键2宽度 + 计算缩放值 (10), RE.top + 局_间距, RE.left + 按键1宽度 + 按键2宽度 + 计算缩放值 (5) + 按键3宽度, RE.bottom - 局_间距, 局_圆角, 局_圆角)
                        画布_画文本 (ps.画布句柄, 局_加粗字体, 文字颜色, 快捷键_信息.按键3, , 文本对齐方式.单行水平垂直居中, RE.left + 按键1宽度 + 按键2宽度 + 计算缩放值 (10), RE.top, RE.left + 按键1宽度 + 按键2宽度 + 计算缩放值 (5) + 按键3宽度, RE.bottom)
                    }
                    如果真 (按键4宽度 != 0)
                    {
                        画布_填充圆角矩形 (ps.画布句柄, 画刷, RE.left + 按键1宽度 + 按键2宽度 + 按键3宽度 + 计算缩放值 (10), RE.top + 局_间距, RE.left + 按键1宽度 + 按键2宽度 + 按键3宽度 + 计算缩放值 (5) + 按键4宽度, RE.bottom - 局_间距, 局_圆角, 局_圆角)
                        画布_画文本 (ps.画布句柄, 局_加粗字体, 文字颜色, 快捷键_信息.按键4, , 文本对齐方式.单行水平垂直居中, RE.left + 按键1宽度 + 按键2宽度 + 按键3宽度 + 计算缩放值 (10), RE.top, RE.left + 按键1宽度 + 按键2宽度 + 按键3宽度 + 计算缩放值 (5) + 按键4宽度, RE.bottom)
                    }
                    如果真 (快捷键图标_句柄 != 0)
                    {
                        画布_画图片矩形 (ps.画布句柄, 快捷键图标_句柄, RE.right - 计算缩放值 (快捷键图标宽度) - 计算缩放值 (10), (ps.高度 - 计算缩放值 (快捷键图标宽度)) / 2, RE.right - 计算缩放值 (10), (ps.高度 - 计算缩放值 (快捷键图标宽度)) / 2 + 计算缩放值 (快捷键图标宽度), ExRGB2ARGB (颜色类.黑色, ))
                    }

                }


                画刷_销毁 (画刷)
                组件结束绘制 (hObj, pObj, ps)  // 固定写法
            }
        }
        <折叠> 否则 (uMsg == -1250)  // 快捷键信息被改变
        {
            变量 RE <类型 = RECTF>
            路径_取边界矩形 (快捷键路径, RE.取指针 ())
            路径更新 (pObj, "快捷键")
            变量 RE2 <类型 = RECTF>
            变量 TT <类型 = RECT>
            路径_取边界矩形 (快捷键路径, RE2.取指针 ())
            如果 (RE.right - RE.left > RE2.right - RE2.left)
            {
                TT.left = (整数)RE.left - 1
                TT.top = (整数)RE.top - 1
                TT.right = (整数)RE.right + 2
                TT.bottom = (整数)RE.bottom + 2
            }
            否则
            {
                TT.left = (整数)RE2.left - 1
                TT.top = (整数)RE2.top - 1
                TT.right = (整数)RE2.right + 2
                TT.bottom = (整数)RE2.bottom + 2
            }
            组件重画区域 (hObj, TT.取指针 ())
            // 组件重画区域 (hObj, 0)
        }
        <折叠> 否则 (uMsg == -1251)  // 按钮信息被改变
        {
            变量 RE <类型 = RECTF>
            路径_取边界矩形 (组合框路径, RE.取指针 ())
            路径更新 (pObj, "按钮")
            变量 RE2 <类型 = RECTF>
            变量 TT <类型 = RECT>
            路径_取边界矩形 (组合框路径, RE2.取指针 ())
            如果 (RE.right - RE.left > RE2.right - RE2.left)
            {
                TT.left = (整数)RE.left - 1
                TT.top = (整数)RE.top - 1
                TT.right = (整数)RE.right + 2
                TT.bottom = (整数)RE.bottom + 2
            }
            否则
            {
                TT.left = (整数)RE2.left - 1
                TT.top = (整数)RE2.top - 1
                TT.right = (整数)RE2.right + 2
                TT.bottom = (整数)RE2.bottom + 2
            }
            组件重画区域 (hObj, TT.取指针 ())

        }
        <折叠> 否则 (uMsg == -1252)  // 滑动条信息被改变
        {
            路径更新 (pObj, "滑动条")
            重画路径区域 (hObj, 滑动条路径)

        }
        <折叠> 否则 (uMsg == WM_MOVE)  // 窗口移动时隐藏遮罩
        {
            如果真 (遮罩画板.取句柄 () != 0 && 遮罩画板.可视 == 真)
            {
                遮罩画板.发送消息 (513, 0, 0)
            }

        }
        // 如果真 (WM_MOUSEHOVER == uMsg)
        {
            // 调试输出 ("鼠标悬停")

        }


        返回 (组件默认过程 (hWnd, hObj, pObj, uMsg, wParam, lParam))
    }

    方法 创建组合框 <折叠>
    {
        如果真 (遮罩画板.取句柄 () == 0)
        {
            组件取父组件Ex (取句柄 (), 窗口引擎)
            遮罩画板.创建组件_从句柄 (窗口引擎, 0, 0, 10, 10, , )
            遮罩画板.挂接事件EX (事件类型.左键被按下)
            遮罩画板.挂接事件EX (事件类型.缓动)
            遮罩画板.可视 = 假

        }
        如果 (组合框项目.取成员数 () < 7)
        {
            模板列表框1.垂直滚动条 = 假
        }

        模板列表框1.创建组件_从句柄 (遮罩画板.取句柄 (), 0, 0, 10, 10, , )


        模板列表框1.置颜色 (颜色标识.边框颜色, ExRGB2ARGB (颜色类.黑色, 50), )
        模板列表框1.置组件数值 (组件数值.基本风格, 位或EX (模板列表框1.取组件数值 (组件数值.基本风格), 组件风格.边框))
        模板列表框1.挂接事件EX (事件类型.可视被改变)
        模板列表框1.挂接事件EX (事件类型.左键被按下)
        模板列表框1.挂接事件EX (事件类型.左键被放开)

        模板列表框1.可视 = 假

    }

    方法 弹出组合框 <折叠>
    参数 pObj <类型 = 组件数据结构指针>
    {
        创建组合框 ()
        变量 窗口矩形 <类型 = RECT>
        变量 RE <类型 = RECTF>
        路径_取边界矩形 (组合框路径, RE.取指针 ())

        取窗口客户区 (窗口引擎, 窗口矩形.取指针 ())
        变量 ptx <类型 = 整数>
        变量 pty <类型 = 整数>
        组件坐标转换 (取句柄 (), 1, ptx, pty)
        变量 组合框左边 <类型 = 整数>
        变量 组合框顶边 <类型 = 整数>
        变量 组合框宽度 <类型 = 整数>
        变量 组合框高度 <类型 = 整数>
        组合框左边 = (整数)四舍五入 (0 - ptx + RE.left - 1, 0)
        组合框顶边 = (整数)四舍五入 (0 - pty + RE.top - 1, 0)
        组合框宽度 = (整数)四舍五入 (RE.right - RE.left + 2, 0)
        如果 (组合框项目.取成员数 () < 7)
        {
            组合框高度 = 组合框项目.取成员数 () * (整数)(组合框_表项高度 + 1)
        }
        否则
        {
            组合框高度 = (整数)(组合框_表项高度 + 1) * 7
        }

        <折叠> 如果真 (组合框_自动计算宽度)
        {
            变量 局_宽度 <类型 = 单精度小数>
            变量 局_最长文本 <类型 = 文本型>
            组合框项目.枚举循环 ()
            {
                变量 局_文本 <类型 = 文本型>
                局_文本 = 组合框项目.取枚举值 ()
                变量 文字宽度 <类型 = 单精度小数>
                变量 文字高度 <类型 = 单精度小数>
                画布_计算文本尺寸 (模板列表框1.取画布句柄 (), 模板列表框1.取字体 (), 局_文本, -1, 文本对齐方式.左边垂直居中, 500, 500, 文字宽度, 文字高度)
                如果真 (文字宽度 > 局_宽度)
                {
                    局_宽度 = 文字宽度
                    局_最长文本 = 局_文本
                }
            }

            如果真 (局_最长文本 != 组合框_文本)
            {
                局_宽度 = (整数)四舍五入 (局_宽度 + 计算缩放值 (30), 0)
                如果 (局_宽度 > 组合框宽度)
                {
                    组合框宽度 = (整数)局_宽度
                }
            }

            变量 超出窗口宽度 <类型 = 整数>
            超出窗口宽度 = 组合框左边 + 组合框宽度 - (窗口矩形.left + 窗口矩形.right) + 10  // 预留宽度
            如果真 (超出窗口宽度 > 0)
            {
                组合框左边 = 组合框左边 - 超出窗口宽度
            }
        }

        变量 超出窗口高度 <类型 = 整数>
        超出窗口高度 = 组合框顶边 + 组合框高度 - (窗口矩形.top + 窗口矩形.bottom) + 10  // 10预留高度
        如果真 (超出窗口高度 > 0)
        {
            组合框顶边 = 组合框顶边 - 超出窗口高度
        }

        遮罩画板.移动 (0, 0, 窗口矩形.right, 窗口矩形.bottom)
        模板列表框1.移动 (组合框左边, 组合框顶边, 组合框宽度, (整数)(组合框高度 * 0.6))
        模板列表框1.置组件圆角 (计算缩放值 (2), 计算缩放值 (2), 0, 0, 假)

        遮罩画板.可视 = 真

        模板列表框1.表项数 = 组合框项目.取成员数 ()
        变量 局_索引 <类型 = 整数>
        局_索引 = 组合框项目.查找首成员 (组合框_文本, 真)
        模板列表框1.保证显示 (局_索引)
        模板列表框1.现行选中项 = 局_索引
        模板列表框1.可视 = 真

        缓动_创建 (10, 0, 位或EX2 (缓动模式, 缓动模式.单次, 缓动模式.分发消息, 缓动模式.顺序, 缓动模式.使用线程), 遮罩画板.取句柄 (), 200, 20, 缓动状态.播放, (整数)(组合框高度 * 0.6), 组合框高度, 0, 0, 1, 0)

    }

    方法 创建列表框
    {
        如果真 (遮罩画板.取句柄 () == 0)
        {
            组件取父组件Ex (取句柄 (), 窗口引擎)
            遮罩画板.创建组件_从句柄 (窗口引擎, 0, 0, 10, 10, , )
            遮罩画板.挂接事件EX (事件类型.左键被按下)
            遮罩画板.挂接事件EX (事件类型.缓动)
            遮罩画板.可视 = 假

        }
        // 如果 (组合框项目.取成员数 () < 7)
        {
            // 模板列表框.垂直滚动条 = 假
        }
        报表列表框1.创建组件_从句柄 (遮罩画板.取句柄 (), 0, 0, 10, 10, , )


        // 模板列表框1.创建组件_从句柄 (遮罩画板.取句柄 (), 0, 0, 10, 10, , )
        // 模板列表框1.置颜色 (颜色标识.边框颜色, ExRGB2ARGB (颜色类.黑色, 50), )
        // 模板列表框1.置组件数值 (组件数值.基本风格, 位或EX (模板列表框1.取组件数值 (组件数值.基本风格), 组件风格.边框))
        // 模板列表框1.挂接事件EX (事件类型.可视被改变)
        // 模板列表框1.挂接事件EX (事件类型.左键被按下)
        // 模板列表框1.挂接事件EX (事件类型.左键被放开)

        模板列表框1.可视 = 假

    }

    方法 弹出列表框 <折叠>
    参数 pObj <类型 = 组件数据结构指针>
    {
        创建组合框 ()
        变量 窗口矩形 <类型 = RECT>
        变量 RE <类型 = RECTF>
        路径_取边界矩形 (组合框路径, RE.取指针 ())

        取窗口客户区 (窗口引擎, 窗口矩形.取指针 ())
        变量 ptx <类型 = 整数>
        变量 pty <类型 = 整数>
        组件坐标转换 (取句柄 (), 1, ptx, pty)
        变量 组合框左边 <类型 = 整数>
        变量 组合框顶边 <类型 = 整数>
        变量 组合框宽度 <类型 = 整数>
        变量 组合框高度 <类型 = 整数>
        组合框左边 = (整数)四舍五入 (0 - ptx + RE.left - 1, 0)
        组合框顶边 = (整数)四舍五入 (0 - pty + RE.top - 1, 0)
        组合框宽度 = (整数)四舍五入 (RE.right - RE.left + 2, 0)
        如果 (组合框项目.取成员数 () < 7)
        {
            组合框高度 = 组合框项目.取成员数 () * (整数)(组合框_表项高度 + 1)
        }
        否则
        {
            组合框高度 = (整数)(组合框_表项高度 + 1) * 7
        }

        <折叠> 如果真 (组合框_自动计算宽度)
        {
            变量 局_宽度 <类型 = 单精度小数>
            变量 局_最长文本 <类型 = 文本型>
            组合框项目.枚举循环 ()
            {
                变量 局_文本 <类型 = 文本型>
                局_文本 = 组合框项目.取枚举值 ()
                变量 文字宽度 <类型 = 单精度小数>
                变量 文字高度 <类型 = 单精度小数>
                画布_计算文本尺寸 (模板列表框1.取画布句柄 (), 模板列表框1.取字体 (), 局_文本, -1, 文本对齐方式.左边垂直居中, 500, 500, 文字宽度, 文字高度)
                如果真 (文字宽度 > 局_宽度)
                {
                    局_宽度 = 文字宽度
                    局_最长文本 = 局_文本
                }
            }

            如果真 (局_最长文本 != 组合框_文本)
            {
                局_宽度 = (整数)四舍五入 (局_宽度 + 计算缩放值 (30), 0)
                如果 (局_宽度 > 组合框宽度)
                {
                    组合框宽度 = (整数)局_宽度
                }
            }

            变量 超出窗口宽度 <类型 = 整数>
            超出窗口宽度 = 组合框左边 + 组合框宽度 - (窗口矩形.left + 窗口矩形.right) + 10  // 预留宽度
            如果真 (超出窗口宽度 > 0)
            {
                组合框左边 = 组合框左边 - 超出窗口宽度
            }
        }

        变量 超出窗口高度 <类型 = 整数>
        超出窗口高度 = 组合框顶边 + 组合框高度 - (窗口矩形.top + 窗口矩形.bottom) + 10  // 10预留高度
        如果真 (超出窗口高度 > 0)
        {
            组合框顶边 = 组合框顶边 - 超出窗口高度
        }

        遮罩画板.移动 (0, 0, 窗口矩形.right, 窗口矩形.bottom)
        模板列表框1.移动 (组合框左边, 组合框顶边, 组合框宽度, (整数)(组合框高度 * 0.6))
        模板列表框1.置组件圆角 (计算缩放值 (2), 计算缩放值 (2), 0, 0, 假)

        遮罩画板.可视 = 真

        模板列表框1.表项数 = 组合框项目.取成员数 ()
        变量 局_索引 <类型 = 整数>
        局_索引 = 组合框项目.查找首成员 (组合框_文本, 真)
        模板列表框1.保证显示 (局_索引)
        模板列表框1.现行选中项 = 局_索引
        模板列表框1.可视 = 真

        缓动_创建 (10, 0, 位或EX2 (缓动模式, 缓动模式.单次, 缓动模式.分发消息, 缓动模式.顺序, 缓动模式.使用线程), 遮罩画板.取句柄 (), 200, 20, 缓动状态.播放, (整数)(组合框高度 * 0.6), 组合框高度, 0, 0, 1, 0)

    }

    方法 模板列表框_组件创建完毕 <接收事件 类型 = 整数 注释 = "当组件被创建完毕后发送此事件" 折叠>
    参数 来源对象 <类型 = 模板列表框 注释 = "提供事件产生的具体来源对象" 折叠>
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 父组件 <类型 = 窗口组件 注释 = "  提供组件所处的父组件,必定有效且已经成功创建."
            注释 = "  可以使用\"属于\"操作符判断具体的父组件数据类型,如: \"如果 (父组件 属于 窗口容器组件)\","
            注释 = "\"如果 (父组件 属于 图片框)\" 等. 判断清楚具体数据类型后,可以使用强制转换将其转换到具体的" 注释 = "窗口组件类对象,如: \"(窗口容器组件)父组件\"" 折叠2>
    参数 组件ID <类型 = 整数 注释 = "提供组件在所处父组件中的ID值">
    {
        如果 (来源对象 == 模板列表框1)
        {
            // 来源对象.置组件圆角 (计算缩放值 (2), 计算缩放值 (2), 0, 0, 假)
            模板列表框1.背景色 = ExRGB2ARGB (2367776, 255)
            模板列表框1.表项高度 = (整数)去除缩放值 (组合框_表项高度)
            模板列表框1.表项间隔高度 = 1



            来源对象.置表项选中色 (RGB2ARGB (颜色类.白色, 20))
            来源对象.置表项热点色 (RGB2ARGB (颜色类.白色, 20))
            来源对象.置表项选中悬浮色 (RGB2ARGB (颜色类.白色, 20))


        }
        返回 (0)
    }

    方法 模板列表框_创建表项子组件 <接收事件 类型 = 整数 注释 = "在事件下手动布局表项内容(手动创建组件)" 折叠>
    参数 来源对象 <类型 = 模板列表框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 表项句柄 <类型 = 整数>
    {
        如果 (来源对象 == 模板列表框1)
        {
            模板列表框1.置表项圆角 (表项句柄, 4, 4, 4, 4)
            变量 局_句柄 <类型 = 整数>
            变量 局_状态条高度 <类型 = 整数>
            变量 局_状态条顶边 <类型 = 整数>
            局_状态条高度 = (整数)四舍五入 (去除缩放值 (组合框_表项高度) - 10, 0)
            局_状态条顶边 = (整数)四舍五入 ((去除缩放值 (组合框_表项高度) - 局_状态条高度) / 2, 0)

            局_句柄 = 组件创建V (组件类名.标签, "", 组件风格.默认, 1, 局_状态条顶边, 3, 局_状态条高度, 表项句柄, )
            模板列表框子组件句柄.加入成员 (局_句柄)

            组件置数值 (局_句柄, 组件数值.ID, 表项句柄 + 1)
            组件置颜色 (局_句柄, 颜色标识.背景颜色, ExRGB2ARGB (16761420, 0), 假)
            组件置圆角 (局_句柄, 2, 2, 2, 2, 假)

            局_句柄 = 组件创建V (组件类名.标签, "", 组件风格.默认, 11, 0, 500, (整数)四舍五入 (去除缩放值 (组合框_表项高度), 0), 表项句柄, )
            模板列表框子组件句柄.加入成员 (局_句柄)
            组件置数值 (局_句柄, 组件数值.ID, 表项句柄 + 2)
            组件置颜色 (局_句柄, 颜色标识.文本颜色_正常, ExRGB2ARGB (颜色类.白色, ), 真)
            组件置数值 (局_句柄, 组件数值.文本格式, 4)
            // 位或EX2 (整数, 文本对齐方式.中间省略, (整数)文本对齐方式.左边垂直居中)

        }
        返回 (0)
    }

    方法 模板列表框_表项填充 <接收事件 类型 = 整数 注释 = "hObjTmp = Ex_ObjGetFromNodeID(lParam, 1) 从节点取子组件句柄"
            注释 = "再对子组件进行相关属性设置" 折叠 折叠2>
    参数 来源对象 <类型 = 模板列表框 注释 = "提供事件产生的具体来源对象">
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 索引 <类型 = 整数 注释 = "索引从0开始.一般需要判断小于数组成员数">
    参数 表项句柄 <类型 = 整数>
    {
        如果 (来源对象 == 模板列表框1)
        {
            变量 局_句柄 <类型 = 整数>
            变量 局_文本 <类型 = 文本型>
            局_句柄 = 组件取句柄自ID (表项句柄, 表项句柄 + 1)
            如果 (索引 == 模板列表框1.现行选中项)
            {
                组件置颜色 (局_句柄, 颜色标识.背景颜色, ExRGB2ARGB (16761420, ), 真)
            }
            否则
            {
                组件置颜色 (局_句柄, 颜色标识.背景颜色, ExRGB2ARGB (16761420, 0), 真)
            }

            局_文本 = 组合框项目.取成员 (索引)
            局_句柄 = 组件取句柄自ID (表项句柄, 表项句柄 + 2)
            组件置文本 (局_句柄, 局_文本, 真)

        }
        返回 (0)
    }

    方法 模板列表框_其他事件 <接收事件 类型 = 整数 注释 = "如EXDUI组件类下未实现某些事件响应,可调用\"挂接事件EX\"后在本事件下响应" 折叠>
    参数 来源对象 <类型 = 模板列表框 注释 = "提供事件产生的具体来源对象" 折叠>
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 hObj <类型 = 整数 注释 = "EXDUI组件句柄">
    参数 nID <类型 = 整数 注释 = "组件ID">
    参数 nCode <类型 = 整数 注释 = "事件类型  或 NM_">
    参数 wParam <类型 = 变整数 注释 = "附加参数1">
    参数 lParam <类型 = 变整数 注释 = "附加参数2">
    {
        如果 (来源对象 == 模板列表框1)
        {
            变量 鼠标_选中项 <类型 = 整数>
            鼠标_选中项 = 模板列表框1.取鼠标位置所在表项 (取低位 ((整数)lParam), 取高位 ((整数)lParam))
            <折叠> 如果 (nCode == 事件类型.可视被改变)
            {
                如果 (wParam == 1)
                {
                    // 模拟组合框.立即刷新 ()
                    // 调试输出 ("显示")

                }

            }
            <折叠> 否则 (nCode == -20)  // 按下
            {
                如果 (鼠标_选中项 != -1)
                {
                    模板列表框1.置组件数值 (组件数值.自定义参数, 鼠标_选中项)
                    模板列表框1.置表项热点色 (RGB2ARGB (颜色类.白色, 10))
                    模板列表框1.重画 ()

                }

            }
            <折叠> 否则 (nCode == -92)  // 放开
            {
                变量 局_句柄 <类型 = 整数>
                变量 表项句柄 <类型 = 整数>
                变量 局_文本 <类型 = 文本型>
                模板列表框1.置表项热点色 (RGB2ARGB (颜色类.白色, 20))
                模板列表框1.重画 ()
                如果真 (鼠标_选中项 == 模板列表框1.取组件数值 (组件数值.自定义参数))
                {
                    如果 (鼠标_选中项 != 模板列表框1.现行选中项)
                    {
                        表项句柄 = 模板列表框1.取表项句柄 (鼠标_选中项)
                        局_句柄 = 组件取句柄自ID (表项句柄, 表项句柄 + 2)
                        局_文本 = 指针到文本 (组件取数值 (局_句柄, 组件数值.标题内容指针))
                        // 调试输出 (鼠标_选中项, 局_文本)

                        如果 (组合框项目被改变 (局_文本, 鼠标_选中项) == 0)
                        {
                            组合框文本 = 局_文本
                        }

                    }
                    遮罩画板.发送消息 (513, 0, 0)

                }

            }



        }
        返回 (0)
    }

    方法 计算快捷键信息宽度 <公开 折叠>
    参数 BS <类型 = 组件数据结构指针>
    {
        变量 局_文本宽度 <类型 = 单精度小数>
        变量 局_文本高度 <类型 = 单精度小数>
        如果 (快捷键_信息.按键1 == "")
        {
            快捷键_信息.按键1 = 快捷键_信息.按键2
            快捷键_信息.按键2 = ""
        }
        如果 (快捷键_信息.按键2 == "")
        {
            快捷键_信息.按键2 = 快捷键_信息.按键3
            快捷键_信息.按键3 = ""
        }
        如果 (快捷键_信息.按键3 == "")
        {
            快捷键_信息.按键3 = 快捷键_信息.按键4
            快捷键_信息.按键4 = ""
        }

        如果 (快捷键_信息.按键1 != "")
        {
            画布_计算文本尺寸 (BS.canvas_obj_, BS.hFont_, 快捷键_信息.按键1, , 文本对齐方式.单行水平垂直居中, 500, 500, 局_文本宽度, 局_文本高度)
            按键1宽度 = 局_文本宽度 + 计算缩放值 (20)
        }
        否则
        {
            按键1宽度 = 0
        }
        如果 (快捷键_信息.按键2 != "")
        {
            画布_计算文本尺寸 (BS.canvas_obj_, BS.hFont_, 快捷键_信息.按键2, , 文本对齐方式.单行水平垂直居中, 500, 500, 局_文本宽度, 局_文本高度)
            按键2宽度 = 局_文本宽度 + 计算缩放值 (20)
        }
        否则
        {
            按键2宽度 = 0
        }
        如果 (快捷键_信息.按键3 != "")
        {
            画布_计算文本尺寸 (BS.canvas_obj_, BS.hFont_, 快捷键_信息.按键3, , 文本对齐方式.单行水平垂直居中, 500, 500, 局_文本宽度, 局_文本高度)
            按键3宽度 = 局_文本宽度 + 计算缩放值 (20)
        }
        否则
        {
            按键3宽度 = 0
        }

        如果 (快捷键_信息.按键4 != "")
        {
            画布_计算文本尺寸 (BS.canvas_obj_, BS.hFont_, 快捷键_信息.按键4, , 文本对齐方式.单行水平垂直居中, 500, 500, 局_文本宽度, 局_文本高度)
            按键4宽度 = 局_文本宽度 + 计算缩放值 (20)
        }
        否则
        {
            按键4宽度 = 0
        }


    }

    方法 重画路径区域 <公开 折叠>
    参数 hObj <类型 = 整数>
    参数 路径句柄 <类型 = 整数>
    {
        变量 RE <类型 = RECTF>
        变量 TT <类型 = RECT>
        路径_取边界矩形 (路径句柄, RE.取指针 ())
        如果 (路径句柄 == 开关路径)
        {
            组件重画区域 (hObj, 0)
        }
        否则
        {
            TT.left = (整数)RE.left - 1
            TT.top = (整数)RE.top - 1
            TT.right = (整数)RE.right + 2
            TT.bottom = (整数)RE.bottom + 2
            组件重画区域 (hObj, TT.取指针 ())
        }


    }

    方法 是否命中 <类型 = 逻辑型 折叠>
    参数 路径句柄 <类型 = 整数>
    参数 lParam <类型 = 变整数>
    {
        变量 局_顶边 <类型 = 单精度小数>
        变量 局_左边 <类型 = 单精度小数>
        // 如果真 (取高位 (lParam) == 0)
        {
            // 返回 (假)
        }
        // 返回 (真)
        局_顶边 = 取高位 (lParam)
        局_左边 = 取低位 (lParam)

        变量 局_鼠标区域 <类型 = 变整数>
        变量 局_路径区域 <类型 = 变整数>
        变量 返回区域信息 <类型 = 整数>
        局_鼠标区域 = 区域_创建自矩形 (局_左边 - 1, 局_顶边 - 1, 局_左边 + 1, 局_顶边 + 1)
        局_路径区域 = 区域_创建自路径 (路径句柄)
        区域_命中测试2 (局_鼠标区域, 局_路径区域, 返回区域信息)
        // 调试输出 (局_顶边, RE.top, 局_左边, RE.left, 返回区域信息)
        区域_销毁 (局_鼠标区域)
        区域_销毁 (局_路径区域)

        如果真 (返回区域信息 != 1)  // 4为线
        {
            返回 (真)
        }
        返回 (假)





    }

    方法 路径更新 <公开 折叠>
    参数 BS <类型 = 组件数据结构指针>
    参数 文本 <类型 = 文本型 @默认值 = "">
    {
        变量 路径句柄 <类型 = 整数>
        变量 局_左边 <类型 = 单精度小数>
        变量 局_右边 <类型 = 单精度小数>
        变量 局_高度 <类型 = 单精度小数>
        变量 局_宽度 <类型 = 单精度小数>
        局_左边 = BS.right_ - BS.left_ - 边距
        局_右边 = BS.right_ - BS.left_ - 边距
        局_宽度 = BS.right_ - BS.left_
        局_高度 = BS.bottom_ - BS.top_
        变量 局_文本宽度 <类型 = 单精度小数>
        变量 局_文本高度 <类型 = 单精度小数>
        <折叠> 如果真 (是否使用开关)
        {
            局_左边 = 局_左边 - 开关_宽度
            路径句柄 = 开关路径
            路径_重置 (路径句柄)
            路径_打开 (路径句柄)
            路径_开始新图形2 (路径句柄, 局_左边, (局_高度 - 开关_高度) / 2 + 开关_高度 / 2)
            路径_添加圆角矩形 (路径句柄, 局_左边, (局_高度 - 开关_高度) / 2, 局_右边, (局_高度 + 开关_高度) / 2, 开关_高度 / 2, 开关_高度 / 2, 开关_高度 / 2, 开关_高度 / 2)
            路径_结束当前图形 (路径句柄, 真)
            路径_关闭 (路径句柄)
            局_左边 = 局_左边 - 边距
            如果真 (开关_是否显示文本)
            {
                局_左边 = 局_左边 - 内_开关文本宽度 - 开关_和文本间距
            }
            局_右边 = 局_左边
        }
        如果真 (是否使用组合框 || 文本 == "按钮")
        {
            画布_计算文本尺寸 (BS.canvas_obj_, BS.hFont_, 组合框_文本, , 文本对齐方式.单行水平垂直居中, 500, 500, 局_文本宽度, 局_文本高度)
            内_组合框_文本宽度 = 局_文本宽度 + 计算缩放值 (10) * 4  // 左边边距加箭头
            局_左边 = 局_左边 - 内_组合框_文本宽度
            路径句柄 = 组合框路径
            路径_重置 (路径句柄)
            路径_打开 (路径句柄)
            路径_开始新图形2 (路径句柄, 局_左边, (局_高度 - 组合框_高度) / 2 + 计算缩放值 (4))
            路径_添加圆角矩形 (路径句柄, 局_左边, (局_高度 - 组合框_高度) / 2, 局_右边, (局_高度 + 组合框_高度) / 2, 计算缩放值 (4), 计算缩放值 (4), 计算缩放值 (4), 计算缩放值 (4))
            路径_结束当前图形 (路径句柄, 真)
            路径_关闭 (路径句柄)

            局_左边 = 局_左边 - 边距
            局_右边 = 局_左边
        }
        <折叠> 如果真 (是否使用滑动条 || 文本 == "滑动条")
        {
            画布_计算文本尺寸 (BS.canvas_obj_, BS.hFont_, 到文本 (滑动条_位置) + " " + 滑动条_附加文本, , 文本对齐方式.单行水平垂直居中, 500, 500, 局_文本宽度, 局_文本高度)
            内_滑动条文本宽度 = 局_文本宽度 + 计算缩放值 (10) * 2  // 左边边距
            局_左边 = 局_左边 - 内_滑动条文本宽度 - 滑动条_宽度
            局_右边 = 局_右边 + 计算缩放值 (10)
            路径句柄 = 滑动条路径
            路径_重置 (路径句柄)
            路径_打开 (路径句柄)
            路径_开始新图形2 (路径句柄, 局_左边, 局_高度 / 2 - 计算缩放值 (10))
            路径_添加圆角矩形 (路径句柄, 局_左边, 局_高度 / 2 - 计算缩放值 (10), 局_右边, 局_高度 / 2 + 计算缩放值 (10), 0, 0, 0, 0)
            路径_结束当前图形 (路径句柄, 真)
            路径_关闭 (路径句柄)

            局_左边 = 局_左边 - 计算缩放值 (10)
            局_右边 = 局_左边
        }
        <折叠> 如果真 (是否使用快捷键 == 真 || 文本 == "快捷键")
        {
            计算快捷键信息宽度 (BS)
            变量 局_快捷键图标宽度 <类型 = 单精度小数>
            如果真 (快捷键图标_句柄 != 0)
            {
                局_快捷键图标宽度 = 计算缩放值 (快捷键图标宽度) + 计算缩放值 (5)
            }

            如果 (按键1宽度 + 按键2宽度 + 按键3宽度 + 按键4宽度 == 0)
            {
                快捷键_信息.按键1 = "快捷键: 空"
                画布_计算文本尺寸 (BS.canvas_obj_, BS.hFont_, 快捷键_信息.按键1, , 文本对齐方式.单行水平垂直居中, 500, 500, 局_文本宽度, 局_文本高度)
                按键1宽度 = 局_文本宽度 + 计算缩放值 (10)
                局_左边 = 局_左边 - 按键1宽度 - 计算缩放值 (15) - 局_快捷键图标宽度
            }
            否则
            {
                局_左边 = 局_左边 - 按键1宽度 - 按键2宽度 - 按键3宽度 - 按键4宽度 - 计算缩放值 (15) - 局_快捷键图标宽度
            }

            路径句柄 = 快捷键路径
            路径_重置 (路径句柄)
            路径_打开 (路径句柄)
            路径_开始新图形2 (路径句柄, 局_左边, (局_高度 - 快捷键_高度) / 2 + 计算缩放值 (4))
            路径_添加圆角矩形 (路径句柄, 局_左边, (局_高度 - 快捷键_高度) / 2, 局_右边, (局_高度 - 快捷键_高度) / 2 + 快捷键_高度, 计算缩放值 (4), 计算缩放值 (4), 计算缩放值 (4), 计算缩放值 (4))
            路径_结束当前图形 (路径句柄, 假)
            路径_关闭 (路径句柄)
        }



    }

    方法 画板_其他事件 <接收事件 类型 = 整数 注释 = "如EXDUI组件类下未实现某些事件响应,可调用\"挂接事件EX\"后在本事件下响应" 折叠>
    参数 来源对象 <类型 = 画板 注释 = "提供事件产生的具体来源对象" 折叠>
    参数 标记值 <类型 = 整数 注释 = "用户调用\"挂接事件\"命令时所提供的\"标记值\"参数值,非此方式挂接事件则本参数值固定为0.">
    参数 hObj <类型 = 整数 注释 = "EXDUI组件句柄">
    参数 nID <类型 = 整数 注释 = "组件ID">
    参数 nCode <类型 = 整数 注释 = "事件类型  或 NM_">
    参数 wParam <类型 = 变整数 注释 = "附加参数1">
    参数 lParam <类型 = 变整数 注释 = "附加参数2">
    {
        如果 (来源对象 == 遮罩画板)
        {
            如果 (nCode == 事件类型.左键被按下)
            {
                来源对象.可视 = 假
                模板列表框1.可视 = 假
                遮罩画板.清除 (模板列表框1.左边 - 100, 模板列表框1.顶边 - 100, 模板列表框1.左边 + 模板列表框1.宽度 + 200, 模板列表框1.顶边 + 模板列表框1.高度 + 200)
                组件置颜色 (取句柄 (), 颜色标识.背景颜色, ExRGB2ARGB (颜色类.白色, 10), 真)
                模板列表框子组件句柄.枚举循环 ()
                {
                    组件销毁 (模板列表框子组件句柄.取枚举值 ())
                }
                模板列表框子组件句柄.删除所有成员 ()
                模板列表框1.销毁 ()
                组合框即将关闭 ()

            }
            <折叠> 如果 (nCode == 事件类型.缓动)
            {
                变量 缓动 <类型 = 缓动结构指针2>
                缓动 = 缓动结构指针2.来自变整数 (lParam)
                模板列表框1.高度 = (整数)缓动.当前值

                如果真 (缓动.进度0到1 == 1)
                {
                    模板列表框1.置组件圆角 (计算缩放值 (2), 计算缩放值 (2), 计算缩放值 (2), 计算缩放值 (2), 真)
                    画布_开始绘制 (遮罩画板.取缓冲画布句柄 ())
                    画布_画阴影 (遮罩画板.取画布句柄 (), 模板列表框1.左边, 模板列表框1.顶边, 模板列表框1.左边 + 模板列表框1.宽度, 模板列表框1.顶边 + 模板列表框1.高度, 计算缩放值 (10), ExRGB2ARGB (颜色类.黑色, 100), 计算缩放值 (2), 计算缩放值 (2), 计算缩放值 (2), 计算缩放值 (2), 0, 0)
                    画布_结束绘制 (遮罩画板.取缓冲画布句柄 ())
                    遮罩画板.刷新显示 ()

                }


            }
        }
        返回 (0)
    }

    # 事件 --

    方法 滑动条位置 <公开 属性读 类型 = 整数 折叠 "">
    {
        返回 (滑动条_位置)
    }

    方法 滑动条位置 <公开 属性写 折叠 "">
    参数 局_位置 <类型 = 整数 编辑时信息 = "9EAA0, 0, 0, 0">
    {
        滑动条_位置 = 局_位置
        本对象.投递消息 (-1252, 0, 0)
    }

    方法 组合框文本 <公开 属性读 类型 = 文本型 折叠 "">
    {
        返回 (组合框_文本)
    }

    方法 组合框文本 <公开 属性写 折叠 "">
    参数 文本 <类型 = 文本型 编辑时信息 = "9EAA0, 0, 0, 0">
    {
        组合框_文本 = 文本
        本对象.投递消息 (-1251, 0, 0)
    }

    方法 选中状态 <公开 属性读 类型 = 逻辑型 折叠 @禁止流程检查 = 真>
    {
        返回 (开关_是否选中)
    }

    方法 选中状态 <公开 属性写 折叠>
    参数 是否选中 <类型 = 逻辑型 编辑时信息 = "9EAA0, 0, 0, 0">
    {
        如果 (是否选中 != 开关_是否选中)
        {
            开关_是否选中 = 是否选中
            组件重画区域 (本对象.取句柄 (), 0)
        }
    }

    方法 选中状态_通知更新 <公开 属性写 折叠>
    参数 是否选中 <类型 = 逻辑型 编辑时信息 = "9EAA0, 0, 0, 0">
    {
        开关_是否选中 = 是否选中
        开关状态改变 (开关_是否选中)
        组件重画区域 (本对象.取句柄 (), 0)
    }

    方法 快捷键 <公开 属性读 类型 = 快捷键信息 折叠>
    {
        返回 (快捷键_信息)
    }

    方法 快捷键 <公开 属性写 折叠>
    参数 快捷键 <类型 = 快捷键信息 编辑时信息 = "9EAA0, 0, 0, 0">
    {
        快捷键_信息 = 快捷键
        本对象.投递消息 (-1250, 0, 0)
    }

    方法 图标 <公开 属性写 折叠>
    参数 图标 <类型 = 字节集类 编辑时信息 = "9EAA0, 0, 0, 0">
    {
        如果 (图标 == 空对象)
        {
            如果真 (快捷键图标_句柄 != 0)
            {
                图片_销毁 (快捷键图标_句柄)
            }
        }
        否则
        {
            变量 局_图标句柄 <类型 = 整数>
            如果真 (图标_句柄 != 0)
            {
                局_图标句柄 = 图标_句柄
            }
            图片_创建自字节集 (图标, 图标_句柄)
            如果真 (局_图标句柄 != 0)
            {
                图片_销毁 (局_图标句柄)
            }
        }


    }

    方法 快捷键图标 <公开 属性写 折叠>
    参数 图标 <类型 = 字节集类 编辑时信息 = "9EAA0, 0, 0, 0">
    {
        如果 (图标 == 空对象)
        {
            如果真 (快捷键图标_句柄 != 0)
            {
                图片_销毁 (快捷键图标_句柄)
            }
        }
        否则
        {
            变量 局_图标句柄 <类型 = 整数>
            如果真 (快捷键图标_句柄 != 0)
            {
                局_图标句柄 = 快捷键图标_句柄
            }
            图片_创建自字节集 (图标, 快捷键图标_句柄)
            如果真 (局_图标句柄 != 0)
            {
                图片_销毁 (局_图标句柄)
            }
        }
        本对象.投递消息 (-1250, 0, 0)

    }

    方法 取状态 <公开 类型 = 逻辑型 折叠>
    参数 参数状态 <类型 = 组件状态>
    {
        变量 状态 <类型 = 整数>
        状态 = (整数)参数状态
        返回 (位与 (成员状态_对象, 状态) == 状态)
    }

    方法 置状态 <折叠>
    参数 参数状态 <类型 = 组件状态 "">
    参数 当前状态 <类型 = 逻辑型>
    {
        变量 状态 <类型 = 整数>
        状态 = (整数)参数状态
        如果 (当前状态 == 真)
        {
            成员状态_对象 = 位或 (成员状态_对象, 状态)
        }
        否则
        {
            成员状态_对象 = 位与 (成员状态_对象, 位取反 (状态))
        }

        如果 (成员状态_对象 < 0)
        {
            成员状态_对象 = 0
        }

    }

    方法 去除缩放值 <公开 类型 = 单精度小数 注释 = "取DPI缩放值 Ex_Scale" 折叠 "">
    参数 需要缩放的值 <类型 = 小数>
    {
        变量 局_缩放值 <类型 = 小数>
        如果 (需要缩放的值 <= 0)
        {
            返回 ((单精度小数)需要缩放的值)
        }
        @ @<局_缩放值>=Ex_Scale((FLOAT)100)/100;
        返回 ((单精度小数)(需要缩放的值 / 局_缩放值))

    }

    方法 计算缩放值 <公开 类型 = 单精度小数 注释 = "取DPI缩放值 Ex_Scale" 折叠 "">
    参数 需要缩放的值 <类型 = 小数>
    {
        变量 局_缩放值 <类型 = 小数>
        @ @<局_缩放值>=Ex_Scale((FLOAT)100)/100;
        返回 ((单精度小数)(需要缩放的值 * 局_缩放值))

    }

    方法 EX_取缩放值 <公开 静态 类型 = 小数 注释 = "取DPI缩放值 Ex_Scale" 折叠 @嵌入式方法 = "">
    {
        @ Ex_Scale((FLOAT)100)/100
    }

    方法 开关状态改变 <公开 定义事件 类型 = 整数 注释 = "返回非0 取消更改" 折叠>
    参数 状态 <类型 = 逻辑型 编辑时信息 = "47FFB, 0, 0, 0">

    方法 组合框即将弹出 <公开 定义事件 类型 = 整数 注释 = "返回非0 取消改变">

    方法 组合框即将关闭 <公开 定义事件 类型 = 整数>

    方法 组合框项目被改变 <公开 定义事件 类型 = 整数 注释 = "返回非0 取消改变" 折叠>
    参数 组合框文本 <类型 = 文本型>
    参数 组合框索引 <类型 = 整数>

    方法 滑动条位置改变 <公开 定义事件 类型 = 整数 折叠>
    参数 位置 <类型 = 整数>

    方法 滑动条位置改变_鼠标放开 <公开 定义事件 类型 = 整数 折叠>
    参数 位置 <类型 = 整数>

    方法 快捷键左键单击 <公开 定义事件 类型 = 整数 编辑时信息 = "47FFB, 0, 0, 0">

    #
    # 属性 --
    # @begin
    # <> <include>
    #
    # virtual LRESULT Virtual_CVWnd_ExObj_Event(HEXOBJ hObj, obj_s* pObj, INT nID, INT nCode, WPARAM wParam, LPARAM lParam) override  
    # {   
    #    return @<其他事件> (hObj, nID, nCode, wParam, lParam);
    # }
    # virtual LRESULT Virtual_CVWnd_ExObj_CALLBACK(HWND hWnd, HEXOBJ hObj, obj_s* pObj, INT uMsg, WPARAM wParam, LPARAM lParam, LRESULT* lpResult)  
    # { 
    # return @<组件消息过滤>(hWnd, hObj, uMsg, wParam, lParam, lpResult); 
    # }
    # <> </include>
    # @end
    #
    #
}
